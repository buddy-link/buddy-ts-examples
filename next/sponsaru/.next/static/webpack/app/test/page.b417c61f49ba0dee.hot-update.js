"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/test/page",{

/***/ "(app-pages-browser)/./src/components/force-graph.tsx":
/*!****************************************!*\
  !*** ./src/components/force-graph.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var force_graph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! force-graph */ \"(app-pages-browser)/./node_modules/force-graph/dist/force-graph.mjs\");\n/* harmony import */ var _app_test_generateData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/app/test/generateData */ \"(app-pages-browser)/./src/app/test/generateData.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\nconst getPrunedTree = (nodesById)=>{\n    const visibleNodes = [];\n    const visibleLinks = [];\n    const traverseTree = (node)=>{\n        if (!node) return;\n        visibleNodes.push(node);\n        if (node.collapsed) return;\n        visibleLinks.push(...node.childLinks);\n        node.childLinks.map((link)=>nodesById[link.target]).forEach(traverseTree);\n    };\n    Object.values(nodesById).forEach((node)=>{\n        if (!node.collapsed) traverseTree(node); // Start traversal from each non-collapsed node\n    });\n    return {\n        nodes: visibleNodes,\n        links: visibleLinks\n    };\n};\nconst GraphVisualization = ()=>{\n    _s();\n    const [graphData, setGraphData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        nodes: [],\n        links: []\n    });\n    const graphRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initialData = (0,_app_test_generateData__WEBPACK_IMPORTED_MODULE_2__.generateGraphData)(200);\n        // Initialize nodes with collapsed state and childLinks\n        const nodes = initialData.nodes.map((node)=>({\n                ...node,\n                collapsed: true,\n                childLinks: []\n            }));\n        // Create a map of nodes by their ID\n        const nodesById = Object.fromEntries(nodes.map((node)=>[\n                node.id,\n                node\n            ]));\n        // Initialize links and assign child links to their parent nodes\n        const links = initialData.links;\n        links.forEach((link)=>{\n            const sourceNode = nodesById[link.source];\n            if (sourceNode) {\n                sourceNode.childLinks.push(link);\n            }\n        });\n        // Initial graph data with only the central nodes of each group visible\n        const initialNodes = nodes.filter((node)=>{\n            const groupNodes = nodes.filter((n)=>n.group === node.group);\n            return groupNodes[0].id === node.id;\n        });\n        setGraphData({\n            nodes: initialNodes,\n            links: []\n        });\n        const Graph = (0,force_graph__WEBPACK_IMPORTED_MODULE_3__[\"default\"])()(graphRef.current).width(0.8 * window.innerWidth).height(0.6 * window.innerHeight).graphData(getPrunedTree(nodesById)).nodeLabel(\"id\").nodeAutoColorBy(\"group\").linkVisibility(true).d3Force(\"link\", d3.forceLink().distance(20).strength(1)).d3Force(\"collision\", d3.forceCollide().radius(5)).onNodeHover((node)=>{\n            if (graphRef.current) {\n                graphRef.current.style.cursor = node && node.childLinks.length ? \"pointer\" : \"\";\n            }\n        }).onNodeClick((node)=>{\n            const n = node;\n            if (n.childLinks.length) {\n                n.collapsed = !n.collapsed;\n                setGraphData(getPrunedTree(nodesById));\n            }\n        }).nodeCanvasObject((node, ctx, globalScale)=>{\n            const label = node.id;\n            const fontSize = 12 / globalScale;\n            ctx.font = \"\".concat(fontSize, \"px Sans-Serif\");\n            if (node.group === 0) {\n                const img = new Image();\n                img.src = \"/logo.webp\";\n                img.onload = ()=>{\n                    ctx.drawImage(img, node.x - img.width / 2, node.y - img.height / 2);\n                };\n            } else {\n                ctx.fillStyle = node.color;\n                ctx.beginPath();\n                ctx.arc(node.x, node.y, 5, 0, 2 * Math.PI, false);\n                ctx.fill();\n                ctx.strokeStyle = \"rgba(0, 0, 0, 0.2)\";\n                ctx.stroke();\n            }\n            const textWidth = ctx.measureText(label).width;\n            const bckgDimensions = [\n                textWidth,\n                fontSize\n            ].map((n)=>n + fontSize * 0.2);\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n            ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = \"black\";\n            ctx.fillText(label, node.x, node.y);\n        });\n        const handleResize = ()=>{\n            Graph.width(0.8 * window.innerWidth);\n            Graph.height(0.6 * window.innerHeight);\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (graphData.nodes.length > 0) {\n            const nodesById = Object.fromEntries(graphData.nodes.map((node)=>[\n                    node.id,\n                    node\n                ]));\n            const Graph = (0,force_graph__WEBPACK_IMPORTED_MODULE_3__[\"default\"])()(graphRef.current).width(0.8 * window.innerWidth).height(0.6 * window.innerHeight).graphData(graphData).nodeLabel(\"id\").nodeAutoColorBy(\"group\").linkVisibility(true).d3Force(\"link\", d3.forceLink().distance(20).strength(1)).d3Force(\"collision\", d3.forceCollide().radius(5)).onNodeHover((node)=>{\n                if (graphRef.current) {\n                    graphRef.current.style.cursor = node && node.childLinks.length ? \"pointer\" : \"\";\n                }\n            }).onNodeClick((node)=>{\n                const n = node;\n                if (n.childLinks.length) {\n                    n.collapsed = !n.collapsed;\n                    setGraphData(getPrunedTree(nodesById));\n                }\n            }).nodeCanvasObject((node, ctx, globalScale)=>{\n                const label = node.id;\n                const fontSize = 12 / globalScale;\n                ctx.font = \"\".concat(fontSize, \"px Sans-Serif\");\n                if (node.group === 0) {\n                    const img = new Image();\n                    img.src = \"/logo.webp\";\n                    img.onload = ()=>{\n                        ctx.drawImage(img, node.x - img.width / 2, node.y - img.height / 2);\n                    };\n                } else {\n                    ctx.fillStyle = node.color;\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, 5, 0, 2 * Math.PI, false);\n                    ctx.fill();\n                    ctx.strokeStyle = \"rgba(0, 0, 0, 0.2)\";\n                    ctx.stroke();\n                }\n                const textWidth = ctx.measureText(label).width;\n                const bckgDimensions = [\n                    textWidth,\n                    fontSize\n                ].map((n)=>n + fontSize * 0.2);\n                ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n                ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n                ctx.textAlign = \"center\";\n                ctx.textBaseline = \"middle\";\n                ctx.fillStyle = \"black\";\n                ctx.fillText(label, node.x, node.y);\n            });\n            const handleResize = ()=>{\n                Graph.width(0.8 * window.innerWidth);\n                Graph.height(0.6 * window.innerHeight);\n            };\n            window.addEventListener(\"resize\", handleResize);\n            return ()=>{\n                window.removeEventListener(\"resize\", handleResize);\n            };\n        }\n    }, [\n        graphData\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex items-center justify-center\",\n        style: {\n            overflow: \"hidden\"\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            id: \"graph\",\n            ref: graphRef,\n            style: {\n                width: \"80vw\",\n                height: \"60vh\",\n                border: \"1px solid #000\",\n                marginTop: \"32px\"\n            }\n        }, void 0, false, {\n            fileName: \"/Users/rafael/work/buddy-link/buddy-ts-examples/next/sponsaru/src/components/force-graph.tsx\",\n            lineNumber: 207,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/rafael/work/buddy-link/buddy-ts-examples/next/sponsaru/src/components/force-graph.tsx\",\n        lineNumber: 206,\n        columnNumber: 5\n    }, undefined);\n};\n_s(GraphVisualization, \"I8nEc+w+QiVP3DVtHUIvCiUYVZA=\");\n_c = GraphVisualization;\n/* harmony default export */ __webpack_exports__[\"default\"] = (GraphVisualization);\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/force-graph.tsx\n"));

/***/ })

});