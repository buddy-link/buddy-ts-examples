"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/test/page",{

/***/ "(app-pages-browser)/./src/components/force-graph.tsx":
/*!****************************************!*\
  !*** ./src/components/force-graph.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var force_graph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! force-graph */ \"(app-pages-browser)/./node_modules/force-graph/dist/force-graph.mjs\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\");\n/* harmony import */ var _app_test_generateData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/app/test/generateData */ \"(app-pages-browser)/./src/app/test/generateData.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nconst getPrunedTree = (nodesById)=>{\n    const visibleNodes = [];\n    const visibleLinks = [];\n    const traverseTree = (node)=>{\n        if (!node) return;\n        visibleNodes.push(node);\n        if (node.collapsed) return;\n        visibleLinks.push(...node.childLinks);\n        node.childLinks.map((link)=>nodesById[link.target]).forEach(traverseTree);\n    };\n    Object.values(nodesById).forEach((node)=>{\n        if (node.group === 0) traverseTree(node); // Start traversal from each central node\n    });\n    return {\n        nodes: visibleNodes,\n        links: visibleLinks\n    };\n};\nconst GraphVisualization = ()=>{\n    _s();\n    const [graphData, setGraphData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        nodes: [],\n        links: []\n    });\n    const graphRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initialData = (0,_app_test_generateData__WEBPACK_IMPORTED_MODULE_3__.generateGraphData)(200);\n        // Initialize nodes with collapsed state and childLinks\n        const nodes = initialData.nodes.map((node)=>({\n                ...node,\n                collapsed: node.group !== 0,\n                childLinks: []\n            }));\n        // Create a map of nodes by their ID\n        const nodesById = Object.fromEntries(nodes.map((node)=>[\n                node.id,\n                node\n            ]));\n        // Initialize links and assign child links to their parent nodes\n        const links = initialData.links;\n        links.forEach((link)=>{\n            const sourceNode = nodesById[link.source];\n            if (sourceNode) {\n                sourceNode.childLinks.push(link);\n            }\n        });\n        // Initial graph data with only the central node visible\n        setGraphData(getPrunedTree(nodesById));\n        const Graph = (0,force_graph__WEBPACK_IMPORTED_MODULE_4__[\"default\"])()(graphRef.current).width(0.8 * window.innerWidth).height(0.6 * window.innerHeight).graphData(getPrunedTree(nodesById)).nodeLabel(\"id\").nodeAutoColorBy(\"group\").linkVisibility(true).d3Force(\"link\", d3__WEBPACK_IMPORTED_MODULE_2__.forceLink().distance(20).strength(1)).d3Force(\"collision\", d3__WEBPACK_IMPORTED_MODULE_2__.forceCollide().radius(5)).onNodeHover((node)=>{\n            if (graphRef.current) {\n                graphRef.current.style.cursor = node && node.childLinks.length ? \"pointer\" : \"\";\n            }\n        }).onNodeClick((node)=>{\n            const n = node;\n            if (n.childLinks.length) {\n                n.collapsed = !n.collapsed;\n                setGraphData(getPrunedTree(nodesById));\n            }\n        }).nodeCanvasObject((node, ctx, globalScale)=>{\n            const label = node.id;\n            const fontSize = 12 / globalScale;\n            ctx.font = \"\".concat(fontSize, \"px Sans-Serif\");\n            if (node.group === 0) {\n                const img = new Image();\n                img.src = \"/logo.webp\";\n                img.onload = ()=>{\n                    ctx.drawImage(img, node.x - img.width / 2, node.y - img.height / 2);\n                };\n            } else {\n                ctx.fillStyle = node.color;\n                ctx.beginPath();\n                ctx.arc(node.x, node.y, 5, 0, 2 * Math.PI, false);\n                ctx.fill();\n                ctx.strokeStyle = \"rgba(0, 0, 0, 0.2)\";\n                ctx.stroke();\n            }\n            const textWidth = ctx.measureText(label).width;\n            const bckgDimensions = [\n                textWidth,\n                fontSize\n            ].map((n)=>n + fontSize * 0.2);\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n            ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = \"black\";\n            ctx.fillText(label, node.x, node.y);\n        });\n        const handleResize = ()=>{\n            Graph.width(0.8 * window.innerWidth);\n            Graph.height(0.6 * window.innerHeight);\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (graphData.nodes.length > 0) {\n            const nodesById = Object.fromEntries(graphData.nodes.map((node)=>[\n                    node.id,\n                    node\n                ]));\n            const Graph = (0,force_graph__WEBPACK_IMPORTED_MODULE_4__[\"default\"])()(graphRef.current).width(0.8 * window.innerWidth).height(0.6 * window.innerHeight).graphData(graphData).nodeLabel(\"id\").nodeAutoColorBy(\"group\").linkVisibility(true).d3Force(\"link\", d3__WEBPACK_IMPORTED_MODULE_2__.forceLink().distance(1).strength(1)).d3Force(\"collision\", d3__WEBPACK_IMPORTED_MODULE_2__.forceCollide().radius(5)).onNodeHover((node)=>{\n                if (graphRef.current) {\n                    graphRef.current.style.cursor = node && node.childLinks.length ? \"pointer\" : \"\";\n                }\n            }).onNodeClick((node)=>{\n                const n = node;\n                if (n.childLinks.length) {\n                    n.collapsed = !n.collapsed;\n                    setGraphData(getPrunedTree(nodesById));\n                }\n            }).nodeCanvasObject((node, ctx, globalScale)=>{\n                const label = node.id;\n                const fontSize = 12 / globalScale;\n                ctx.font = \"\".concat(fontSize, \"px Sans-Serif\");\n                if (node.group === 0) {\n                    const img = new Image();\n                    img.src = \"/logo.webp\";\n                    img.onload = ()=>{\n                        ctx.drawImage(img, node.x - img.width / 2, node.y - img.height / 2);\n                    };\n                } else {\n                    ctx.fillStyle = node.color;\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, 5, 0, 2 * Math.PI, false);\n                    ctx.fill();\n                    ctx.strokeStyle = \"rgba(0, 0, 0, 0.2)\";\n                    ctx.stroke();\n                }\n                const textWidth = ctx.measureText(label).width;\n                const bckgDimensions = [\n                    textWidth,\n                    fontSize\n                ].map((n)=>n + fontSize * 0.2);\n                ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n                ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n                ctx.textAlign = \"center\";\n                ctx.textBaseline = \"middle\";\n                ctx.fillStyle = \"black\";\n                ctx.fillText(label, node.x, node.y);\n            });\n            const handleResize = ()=>{\n                Graph.width(0.8 * window.innerWidth);\n                Graph.height(0.6 * window.innerHeight);\n            };\n            window.addEventListener(\"resize\", handleResize);\n            return ()=>{\n                window.removeEventListener(\"resize\", handleResize);\n            };\n        }\n    }, [\n        graphData\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex items-center justify-center\",\n        style: {\n            overflow: \"hidden\"\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            id: \"graph\",\n            ref: graphRef,\n            style: {\n                width: \"80vw\",\n                height: \"60vh\",\n                border: \"1px solid #000\",\n                marginTop: \"32px\"\n            }\n        }, void 0, false, {\n            fileName: \"/Users/rafael/work/buddy-link/buddy-ts-examples/next/sponsaru/src/components/force-graph.tsx\",\n            lineNumber: 203,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/rafael/work/buddy-link/buddy-ts-examples/next/sponsaru/src/components/force-graph.tsx\",\n        lineNumber: 202,\n        columnNumber: 5\n    }, undefined);\n};\n_s(GraphVisualization, \"I8nEc+w+QiVP3DVtHUIvCiUYVZA=\");\n_c = GraphVisualization;\n/* harmony default export */ __webpack_exports__[\"default\"] = (GraphVisualization);\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2ZvcmNlLWdyYXBoLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFb0Q7QUFDZjtBQUNaO0FBQ21DO0FBa0I1RCxNQUFNTSxnQkFBZ0IsQ0FBQ0M7SUFDckIsTUFBTUMsZUFBdUIsRUFBRTtJQUMvQixNQUFNQyxlQUF1QixFQUFFO0lBRS9CLE1BQU1DLGVBQWUsQ0FBQ0M7UUFDcEIsSUFBSSxDQUFDQSxNQUFNO1FBQ1hILGFBQWFJLElBQUksQ0FBQ0Q7UUFDbEIsSUFBSUEsS0FBS0UsU0FBUyxFQUFFO1FBQ3BCSixhQUFhRyxJQUFJLElBQUlELEtBQUtHLFVBQVU7UUFDcENILEtBQUtHLFVBQVUsQ0FBRUMsR0FBRyxDQUFDLENBQUNDLE9BQVNULFNBQVMsQ0FBQ1MsS0FBS0MsTUFBTSxDQUFDLEVBQUVDLE9BQU8sQ0FBQ1I7SUFDakU7SUFFQVMsT0FBT0MsTUFBTSxDQUFDYixXQUFXVyxPQUFPLENBQUMsQ0FBQ1A7UUFDaEMsSUFBSUEsS0FBS1UsS0FBSyxLQUFLLEdBQUdYLGFBQWFDLE9BQU8seUNBQXlDO0lBQ3JGO0lBRUEsT0FBTztRQUFFVyxPQUFPZDtRQUFjZSxPQUFPZDtJQUFhO0FBQ3BEO0FBRUEsTUFBTWUscUJBQStCOztJQUNuQyxNQUFNLENBQUNDLFdBQVdDLGFBQWEsR0FBR3pCLCtDQUFRQSxDQUFtQztRQUFFcUIsT0FBTyxFQUFFO1FBQUVDLE9BQU8sRUFBRTtJQUFDO0lBQ3BHLE1BQU1JLFdBQVd6Qiw2Q0FBTUEsQ0FBd0I7SUFFL0NGLGdEQUFTQSxDQUFDO1FBQ1IsTUFBTTRCLGNBQWN2Qix5RUFBaUJBLENBQUM7UUFFdEMsdURBQXVEO1FBQ3ZELE1BQU1pQixRQUFnQk0sWUFBWU4sS0FBSyxDQUFDUCxHQUFHLENBQUMsQ0FBQ0osT0FBVTtnQkFDckQsR0FBR0EsSUFBSTtnQkFDUEUsV0FBV0YsS0FBS1UsS0FBSyxLQUFLO2dCQUMxQlAsWUFBWSxFQUFFO1lBQ2hCO1FBRUEs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LElBQU1BLElBQUlLLFdBQVc7Z0JBQ3ZFSCxJQUFJWSxTQUFTLEdBQUc7Z0JBQ2hCWixJQUFJd0IsUUFBUSxDQUFDckUsS0FBS3VELENBQUMsR0FBSWEsY0FBYyxDQUFDLEVBQUUsR0FBRyxHQUFHcEUsS0FBS3dELENBQUMsR0FBSVksY0FBYyxDQUFDLEVBQUUsR0FBRyxNQUFNQTtnQkFDbEZ2QixJQUFJeUIsU0FBUyxHQUFHO2dCQUNoQnpCLElBQUkwQixZQUFZLEdBQUc7Z0JBQ25CMUIsSUFBSVksU0FBUyxHQUFHO2dCQUNoQlosSUFBSTJCLFFBQVEsQ0FBQ3pCLE9BQU8vQyxLQUFLdUQsQ0FBQyxFQUFHdkQsS0FBS3dELENBQUM7WUFDckM7WUFFRixNQUFNaUIsZUFBZTtnQkFDbkJuRCxNQUFNRSxLQUFLLENBQUMsTUFBTUMsT0FBT0MsVUFBVTtnQkFDbkNKLE1BQU1LLE1BQU0sQ0FBQyxNQUFNRixPQUFPRyxXQUFXO1lBQ3ZDO1lBRUFILE9BQU9pRCxnQkFBZ0IsQ0FBQyxVQUFVRDtZQUNsQyxPQUFPO2dCQUNMaEQsT0FBT2tELG1CQUFtQixDQUFDLFVBQVVGO1lBQ3ZDO1FBQ0Y7SUFDRixHQUFHO1FBQUMzRDtLQUFVO0lBRWQscUJBQ0UsOERBQUM4RDtRQUFJQyxXQUFVO1FBQW1DdEMsT0FBTztZQUFFdUMsVUFBVTtRQUFTO2tCQUM1RSw0RUFBQ0Y7WUFDQ3pELElBQUc7WUFDSDRELEtBQUsvRDtZQUNMdUIsT0FBTztnQkFDTGYsT0FBTztnQkFDUEcsUUFBUTtnQkFDUnFELFFBQVE7Z0JBQ1JDLFdBQVc7WUFDYjs7Ozs7Ozs7Ozs7QUFJUjtHQTVLTXBFO0tBQUFBO0FBOEtOLCtEQUFlQSxrQkFBa0JBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvZm9yY2UtZ3JhcGgudHN4PzAxMzEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9yY2VHcmFwaCBmcm9tICdmb3JjZS1ncmFwaCc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgeyBnZW5lcmF0ZUdyYXBoRGF0YSB9IGZyb20gJ0AvYXBwL3Rlc3QvZ2VuZXJhdGVEYXRhJztcblxudHlwZSBOb2RlID0ge1xuICBpZDogc3RyaW5nO1xuICBncm91cDogbnVtYmVyO1xuICBjb2xvcjogc3RyaW5nO1xuICB4PzogbnVtYmVyO1xuICB5PzogbnVtYmVyO1xuICBjb2xsYXBzZWQ/OiBib29sZWFuO1xuICBjaGlsZExpbmtzPzogTGlua1tdO1xufTtcblxudHlwZSBMaW5rID0ge1xuICBpZDogc3RyaW5nO1xuICBzb3VyY2U6IHN0cmluZztcbiAgdGFyZ2V0OiBzdHJpbmc7XG59O1xuXG5jb25zdCBnZXRQcnVuZWRUcmVlID0gKG5vZGVzQnlJZDogeyBba2V5OiBzdHJpbmddOiBOb2RlIH0pID0+IHtcbiAgY29uc3QgdmlzaWJsZU5vZGVzOiBOb2RlW10gPSBbXTtcbiAgY29uc3QgdmlzaWJsZUxpbmtzOiBMaW5rW10gPSBbXTtcblxuICBjb25zdCB0cmF2ZXJzZVRyZWUgPSAobm9kZTogTm9kZSkgPT4ge1xuICAgIGlmICghbm9kZSkgcmV0dXJuO1xuICAgIHZpc2libGVOb2Rlcy5wdXNoKG5vZGUpO1xuICAgIGlmIChub2RlLmNvbGxhcHNlZCkgcmV0dXJuO1xuICAgIHZpc2libGVMaW5rcy5wdXNoKC4uLm5vZGUuY2hpbGRMaW5rcyEpO1xuICAgIG5vZGUuY2hpbGRMaW5rcyEubWFwKChsaW5rKSA9PiBub2Rlc0J5SWRbbGluay50YXJnZXRdKS5mb3JFYWNoKHRyYXZlcnNlVHJlZSk7XG4gIH07XG5cbiAgT2JqZWN0LnZhbHVlcyhub2Rlc0J5SWQpLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICBpZiAobm9kZS5ncm91cCA9PT0gMCkgdHJhdmVyc2VUcmVlKG5vZGUpOyAvLyBTdGFydCB0cmF2ZXJzYWwgZnJvbSBlYWNoIGNlbnRyYWwgbm9kZVxuICB9KTtcblxuICByZXR1cm4geyBub2RlczogdmlzaWJsZU5vZGVzLCBsaW5rczogdmlzaWJsZUxpbmtzIH07XG59O1xuXG5jb25zdCBHcmFwaFZpc3VhbGl6YXRpb246IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBbZ3JhcGhEYXRhLCBzZXRHcmFwaERhdGFdID0gdXNlU3RhdGU8eyBub2RlczogTm9kZVtdOyBsaW5rczogTGlua1tdIH0+KHsgbm9kZXM6IFtdLCBsaW5rczogW10gfSk7XG4gIGNvbnN0IGdyYXBoUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50IHwgbnVsbD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBpbml0aWFsRGF0YSA9IGdlbmVyYXRlR3JhcGhEYXRhKDIwMCk7XG5cbiAgICAvLyBJbml0aWFsaXplIG5vZGVzIHdpdGggY29sbGFwc2VkIHN0YXRlIGFuZCBjaGlsZExpbmtzXG4gICAgY29uc3Qgbm9kZXM6IE5vZGVbXSA9IGluaXRpYWxEYXRhLm5vZGVzLm1hcCgobm9kZSkgPT4gKHtcbiAgICAgIC4uLm5vZGUsXG4gICAgICBjb2xsYXBzZWQ6IG5vZGUuZ3JvdXAgIT09IDAsXG4gICAgICBjaGlsZExpbmtzOiBbXSxcbiAgICB9KSk7XG5cbiAgICAvLyBDcmVhdGUgYSBtYXAgb2Ygbm9kZXMgYnkgdGhlaXIgSURcbiAgICBjb25zdCBub2Rlc0J5SWQgPSBPYmplY3QuZnJvbUVudHJpZXMobm9kZXMubWFwKChub2RlKSA9PiBbbm9kZS5pZCwgbm9kZV0pKTtcblxuICAgIC8vIEluaXRpYWxpemUgbGlua3MgYW5kIGFzc2lnbiBjaGlsZCBsaW5rcyB0byB0aGVpciBwYXJlbnQgbm9kZXNcbiAgICBjb25zdCBsaW5rczogTGlua1tdID0gaW5pdGlhbERhdGEubGlua3M7XG4gICAgbGlua3MuZm9yRWFjaCgobGluaykgPT4ge1xuICAgICAgY29uc3Qgc291cmNlTm9kZSA9IG5vZGVzQnlJZFtsaW5rLnNvdXJjZV07XG4gICAgICBpZiAoc291cmNlTm9kZSkge1xuICAgICAgICBzb3VyY2VOb2RlLmNoaWxkTGlua3MhLnB1c2gobGluayk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBJbml0aWFsIGdyYXBoIGRhdGEgd2l0aCBvbmx5IHRoZSBjZW50cmFsIG5vZGUgdmlzaWJsZVxuICAgIHNldEdyYXBoRGF0YShnZXRQcnVuZWRUcmVlKG5vZGVzQnlJZCkpO1xuXG4gICAgY29uc3QgR3JhcGggPSBGb3JjZUdyYXBoKCkoZ3JhcGhSZWYuY3VycmVudCEpXG4gICAgICAud2lkdGgoMC44ICogd2luZG93LmlubmVyV2lkdGgpXG4gICAgICAuaGVpZ2h0KDAuNiAqIHdpbmRvdy5pbm5lckhlaWdodClcbiAgICAgIC5ncmFwaERhdGEoZ2V0UHJ1bmVkVHJlZShub2Rlc0J5SWQpKVxuICAgICAgLm5vZGVMYWJlbCgnaWQnKVxuICAgICAgLm5vZGVBdXRvQ29sb3JCeSgnZ3JvdXAnKVxuICAgICAgLmxpbmtWaXNpYmlsaXR5KHRydWUpXG4gICAgICAuZDNGb3JjZSgnbGluaycsIGQzLmZvcmNlTGluaygpLmRpc3RhbmNlKDIwKS5zdHJlbmd0aCgxKSlcbiAgICAgIC5kM0ZvcmNlKCdjb2xsaXNpb24nLCBkMy5mb3JjZUNvbGxpZGUoKS5yYWRpdXMoNSkpXG4gICAgICAub25Ob2RlSG92ZXIoKG5vZGUpID0+IHtcbiAgICAgICAgaWYgKGdyYXBoUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICBncmFwaFJlZi5jdXJyZW50LnN0eWxlLmN1cnNvciA9IG5vZGUgJiYgKG5vZGUgYXMgTm9kZSkuY2hpbGRMaW5rcyEubGVuZ3RoID8gJ3BvaW50ZXInIDogJyc7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAub25Ob2RlQ2xpY2soKG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgbiA9IG5vZGUgYXMgTm9kZTtcbiAgICAgICAgaWYgKG4uY2hpbGRMaW5rcyEubGVuZ3RoKSB7XG4gICAgICAgICAgbi5jb2xsYXBzZWQgPSAhbi5jb2xsYXBzZWQ7XG4gICAgICAgICAgc2V0R3JhcGhEYXRhKGdldFBydW5lZFRyZWUobm9kZXNCeUlkKSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAubm9kZUNhbnZhc09iamVjdCgobm9kZTogTm9kZSwgY3R4LCBnbG9iYWxTY2FsZSkgPT4ge1xuICAgICAgICBjb25zdCBsYWJlbCA9IG5vZGUuaWQ7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gMTIgLyBnbG9iYWxTY2FsZTtcbiAgICAgICAgY3R4LmZvbnQgPSBgJHtmb250U2l6ZX1weCBTYW5zLVNlcmlmYDtcblxuICAgICAgICBpZiAobm9kZS5ncm91cCA9PT0gMCkge1xuICAgICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgIGltZy5zcmMgPSAnL2xvZ28ud2VicCc7XG4gICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBub2RlLnghIC0gaW1nLndpZHRoIC8gMiwgbm9kZS55ISAtIGltZy5oZWlnaHQgLyAyKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBub2RlLmNvbG9yO1xuICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBjdHguYXJjKG5vZGUueCEsIG5vZGUueSEsIDUsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjIpJztcbiAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgICAgICBjb25zdCBiY2tnRGltZW5zaW9ucyA9IFt0ZXh0V2lkdGgsIGZvbnRTaXplXS5tYXAoKG4pID0+IG4gKyBmb250U2l6ZSAqIDAuMik7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpJztcbiAgICAgICAgY3R4LmZpbGxSZWN0KG5vZGUueCEgLSBiY2tnRGltZW5zaW9uc1swXSAvIDIsIG5vZGUueSEgLSBiY2tnRGltZW5zaW9uc1sxXSAvIDIsIC4uLmJja2dEaW1lbnNpb25zKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICBjdHguZmlsbFRleHQobGFiZWwsIG5vZGUueCEsIG5vZGUueSEpO1xuICAgICAgfSk7XG5cbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICBHcmFwaC53aWR0aCgwLjggKiB3aW5kb3cuaW5uZXJXaWR0aCk7XG4gICAgICBHcmFwaC5oZWlnaHQoMC42ICogd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICB9O1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChncmFwaERhdGEubm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qgbm9kZXNCeUlkID0gT2JqZWN0LmZyb21FbnRyaWVzKGdyYXBoRGF0YS5ub2Rlcy5tYXAoKG5vZGUpID0+IFtub2RlLmlkLCBub2RlXSkpO1xuXG4gICAgICBjb25zdCBHcmFwaCA9IEZvcmNlR3JhcGgoKShncmFwaFJlZi5jdXJyZW50ISlcbiAgICAgICAgLndpZHRoKDAuOCAqIHdpbmRvdy5pbm5lcldpZHRoKVxuICAgICAgICAuaGVpZ2h0KDAuNiAqIHdpbmRvdy5pbm5lckhlaWdodClcbiAgICAgICAgLmdyYXBoRGF0YShncmFwaERhdGEpXG4gICAgICAgIC5ub2RlTGFiZWwoJ2lkJylcbiAgICAgICAgLm5vZGVBdXRvQ29sb3JCeSgnZ3JvdXAnKVxuICAgICAgICAubGlua1Zpc2liaWxpdHkodHJ1ZSlcbiAgICAgICAgLmQzRm9yY2UoJ2xpbmsnLCBkMy5mb3JjZUxpbmsoKS5kaXN0YW5jZSgxKS5zdHJlbmd0aCgxKSlcbiAgICAgICAgLmQzRm9yY2UoJ2NvbGxpc2lvbicsIGQzLmZvcmNlQ29sbGlkZSgpLnJhZGl1cyg1KSlcbiAgICAgICAgLm9uTm9kZUhvdmVyKChub2RlKSA9PiB7XG4gICAgICAgICAgaWYgKGdyYXBoUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGdyYXBoUmVmLmN1cnJlbnQuc3R5bGUuY3Vyc29yID0gbm9kZSAmJiAobm9kZSBhcyBOb2RlKS5jaGlsZExpbmtzIS5sZW5ndGggPyAncG9pbnRlcicgOiAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5vbk5vZGVDbGljaygobm9kZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG4gPSBub2RlIGFzIE5vZGU7XG4gICAgICAgICAgaWYgKG4uY2hpbGRMaW5rcyEubGVuZ3RoKSB7XG4gICAgICAgICAgICBuLmNvbGxhcHNlZCA9ICFuLmNvbGxhcHNlZDtcbiAgICAgICAgICAgIHNldEdyYXBoRGF0YShnZXRQcnVuZWRUcmVlKG5vZGVzQnlJZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLm5vZGVDYW52YXNPYmplY3QoKG5vZGU6IE5vZGUsIGN0eCwgZ2xvYmFsU2NhbGUpID0+IHtcbiAgICAgICAgICBjb25zdCBsYWJlbCA9IG5vZGUuaWQ7XG4gICAgICAgICAgY29uc3QgZm9udFNpemUgPSAxMiAvIGdsb2JhbFNjYWxlO1xuICAgICAgICAgIGN0eC5mb250ID0gYCR7Zm9udFNpemV9cHggU2Fucy1TZXJpZmA7XG5cbiAgICAgICAgICBpZiAobm9kZS5ncm91cCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICBpbWcuc3JjID0gJy9sb2dvLndlYnAnO1xuICAgICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIG5vZGUueCEgLSBpbWcud2lkdGggLyAyLCBub2RlLnkhIC0gaW1nLmhlaWdodCAvIDIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG5vZGUuY29sb3I7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHguYXJjKG5vZGUueCEsIG5vZGUueSEsIDUsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JnYmEoMCwgMCwgMCwgMC4yKSc7XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxhYmVsKS53aWR0aDtcbiAgICAgICAgICBjb25zdCBiY2tnRGltZW5zaW9ucyA9IFt0ZXh0V2lkdGgsIGZvbnRTaXplXS5tYXAoKG4pID0+IG4gKyBmb250U2l6ZSAqIDAuMik7XG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCknO1xuICAgICAgICAgIGN0eC5maWxsUmVjdChub2RlLnghIC0gYmNrZ0RpbWVuc2lvbnNbMF0gLyAyLCBub2RlLnkhIC0gYmNrZ0RpbWVuc2lvbnNbMV0gLyAyLCAuLi5iY2tnRGltZW5zaW9ucyk7XG4gICAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcbiAgICAgICAgICBjdHguZmlsbFRleHQobGFiZWwsIG5vZGUueCEsIG5vZGUueSEpO1xuICAgICAgICB9KTtcblxuICAgICAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgICBHcmFwaC53aWR0aCgwLjggKiB3aW5kb3cuaW5uZXJXaWR0aCk7XG4gICAgICAgIEdyYXBoLmhlaWdodCgwLjYgKiB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgICAgfTtcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICAgIH07XG4gICAgfVxuICB9LCBbZ3JhcGhEYXRhXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCIgc3R5bGU9e3sgb3ZlcmZsb3c6ICdoaWRkZW4nIH19PlxuICAgICAgPGRpdlxuICAgICAgICBpZD1cImdyYXBoXCJcbiAgICAgICAgcmVmPXtncmFwaFJlZn1cbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICB3aWR0aDogJzgwdncnLFxuICAgICAgICAgIGhlaWdodDogJzYwdmgnLFxuICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjMDAwJyxcbiAgICAgICAgICBtYXJnaW5Ub3A6ICczMnB4JyxcbiAgICAgICAgfX1cbiAgICAgID48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdyYXBoVmlzdWFsaXphdGlvbjtcbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInVzZVJlZiIsIkZvcmNlR3JhcGgiLCJkMyIsImdlbmVyYXRlR3JhcGhEYXRhIiwiZ2V0UHJ1bmVkVHJlZSIsIm5vZGVzQnlJZCIsInZpc2libGVOb2RlcyIsInZpc2libGVMaW5rcyIsInRyYXZlcnNlVHJlZSIsIm5vZGUiLCJwdXNoIiwiY29sbGFwc2VkIiwiY2hpbGRMaW5rcyIsIm1hcCIsImxpbmsiLCJ0YXJnZXQiLCJmb3JFYWNoIiwiT2JqZWN0IiwidmFsdWVzIiwiZ3JvdXAiLCJub2RlcyIsImxpbmtzIiwiR3JhcGhWaXN1YWxpemF0aW9uIiwiZ3JhcGhEYXRhIiwic2V0R3JhcGhEYXRhIiwiZ3JhcGhSZWYiLCJpbml0aWFsRGF0YSIsImZyb21FbnRyaWVzIiwiaWQiLCJzb3VyY2VOb2RlIiwic291cmNlIiwiR3JhcGgiLCJjdXJyZW50Iiwid2lkdGgiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJub2RlTGFiZWwiLCJub2RlQXV0b0NvbG9yQnkiLCJsaW5rVmlzaWJpbGl0eSIsImQzRm9yY2UiLCJmb3JjZUxpbmsiLCJkaXN0YW5jZSIsInN0cmVuZ3RoIiwiZm9yY2VDb2xsaWRlIiwicmFkaXVzIiwib25Ob2RlSG92ZXIiLCJzdHlsZSIsImN1cnNvciIsImxlbmd0aCIsIm9uTm9kZUNsaWNrIiwibiIsIm5vZGVDYW52YXNPYmplY3QiLCJjdHgiLCJnbG9iYWxTY2FsZSIsImxhYmVsIiwiZm9udFNpemUiLCJmb250IiwiaW1nIiwiSW1hZ2UiLCJzcmMiLCJvbmxvYWQiLCJkcmF3SW1hZ2UiLCJ4IiwieSIsImZpbGxTdHlsZSIsImNvbG9yIiwiYmVnaW5QYXRoIiwiYXJjIiwiTWF0aCIsIlBJIiwiZmlsbCIsInN0cm9rZVN0eWxlIiwic3Ryb2tlIiwidGV4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJiY2tnRGltZW5zaW9ucyIsImZpbGxSZWN0IiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwiZmlsbFRleHQiLCJoYW5kbGVSZXNpemUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpdiIsImNsYXNzTmFtZSIsIm92ZXJmbG93IiwicmVmIiwiYm9yZGVyIiwibWFyZ2luVG9wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/force-graph.tsx\n"));

/***/ })

});