"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/test/page",{

/***/ "(app-pages-browser)/./src/components/force-graph.tsx":
/*!****************************************!*\
  !*** ./src/components/force-graph.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var force_graph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! force-graph */ \"(app-pages-browser)/./node_modules/force-graph/dist/force-graph.mjs\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\");\n/* harmony import */ var _app_test_generateData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/app/test/generateData */ \"(app-pages-browser)/./src/app/test/generateData.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nconst GraphVisualization = ()=>{\n    _s();\n    const [graphData, setGraphData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        nodes: [],\n        links: []\n    });\n    const graphRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initialData = (0,_app_test_generateData__WEBPACK_IMPORTED_MODULE_3__.generateGraphData)(200);\n        // Initialize nodes with collapsed state and childLinks\n        const nodes1 = initialData.nodes.map((node)=>({\n                ...node,\n                collapsed: node.id !== \"1\",\n                childLinks: []\n            }));\n        // Create a map of nodes by their ID\n        const nodesById = Object.fromEntries(nodes1.map((node)=>[\n                node.id,\n                node\n            ]));\n        // Initialize links and assign child links to their parent nodes\n        const links = initialData.links;\n        links.forEach((link)=>{\n            const sourceNode = nodesById[link.source];\n            if (sourceNode) {\n                sourceNode.childLinks.push(link);\n            }\n        });\n        // Initial graph data with only the central node visible\n        setGraphData({\n            nodes: nodes1,\n            links: []\n        });\n        const Graph = (0,force_graph__WEBPACK_IMPORTED_MODULE_4__[\"default\"])()(graphRef.current).width(0.8 * window.innerWidth).height(0.6 * window.innerHeight).graphData(getPrunedTree(nodes1)).nodeLabel(\"id\").nodeAutoColorBy(\"group\").linkVisibility(true).d3Force(\"link\", d3__WEBPACK_IMPORTED_MODULE_2__.forceLink().distance(20).strength(1)).d3Force(\"collision\", d3__WEBPACK_IMPORTED_MODULE_2__.forceCollide().radius(5)).onNodeHover((node)=>{\n            if (graphRef.current) {\n                graphRef.current.style.cursor = node && node.childLinks.length ? \"pointer\" : \"\";\n            }\n        }).onNodeClick((node)=>{\n            const n = node;\n            if (n.childLinks.length) {\n                n.collapsed = !n.collapsed;\n                setGraphData(getPrunedTree(nodesById));\n            }\n        }).nodeCanvasObject((node, ctx, globalScale)=>{\n            const label = node.id;\n            const fontSize = 12 / globalScale;\n            ctx.font = \"\".concat(fontSize, \"px Sans-Serif\");\n            if (node.id === \"1\") {\n                const img = new Image();\n                img.src = \"/logo.webp\";\n                img.onload = ()=>{\n                    ctx.drawImage(img, node.x - img.width / 2, node.y - img.height / 2);\n                };\n            } else {\n                ctx.fillStyle = node.color;\n                ctx.beginPath();\n                ctx.arc(node.x, node.y, 5, 0, 2 * Math.PI, false);\n                ctx.fill();\n                ctx.strokeStyle = \"rgba(0, 0, 0, 0.2)\";\n                ctx.stroke();\n            }\n            const textWidth = ctx.measureText(label).width;\n            const bckgDimensions = [\n                textWidth,\n                fontSize\n            ].map((n)=>n + fontSize * 0.2);\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n            ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = \"black\";\n            ctx.fillText(label, node.x, node.y);\n        });\n        const handleResize = ()=>{\n            Graph.width(0.8 * window.innerWidth);\n            Graph.height(0.6 * window.innerHeight);\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (graphData.nodes.length > 0) {\n            const nodesById = Object.fromEntries(nodes.map((node)=>[\n                    node.id,\n                    node\n                ]));\n            const Graph = (0,force_graph__WEBPACK_IMPORTED_MODULE_4__[\"default\"])()(graphRef.current).width(0.8 * window.innerWidth).height(0.6 * window.innerHeight).graphData(graphData).nodeLabel(\"id\").nodeAutoColorBy(\"group\").linkVisibility(true).d3Force(\"link\", d3__WEBPACK_IMPORTED_MODULE_2__.forceLink().distance(20).strength(1)).d3Force(\"collision\", d3__WEBPACK_IMPORTED_MODULE_2__.forceCollide().radius(5)).onNodeHover((node)=>{\n                if (graphRef.current) {\n                    graphRef.current.style.cursor = node && node.childLinks.length ? \"pointer\" : \"\";\n                }\n            }).onNodeClick((node)=>{\n                const n = node;\n                if (n.childLinks.length) {\n                    n.collapsed = !n.collapsed;\n                    setGraphData(getPrunedTree(nodesById));\n                }\n            }).nodeCanvasObject((node, ctx, globalScale)=>{\n                const label = node.id;\n                const fontSize = 12 / globalScale;\n                ctx.font = \"\".concat(fontSize, \"px Sans-Serif\");\n                if (node.id === \"1\") {\n                    const img = new Image();\n                    img.src = \"/logo.webp\";\n                    img.onload = ()=>{\n                        ctx.drawImage(img, node.x - img.width / 2, node.y - img.height / 2);\n                    };\n                } else {\n                    ctx.fillStyle = node.color;\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, 5, 0, 2 * Math.PI, false);\n                    ctx.fill();\n                    ctx.strokeStyle = \"rgba(0, 0, 0, 0.2)\";\n                    ctx.stroke();\n                }\n                const textWidth = ctx.measureText(label).width;\n                const bckgDimensions = [\n                    textWidth,\n                    fontSize\n                ].map((n)=>n + fontSize * 0.2);\n                ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n                ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n                ctx.textAlign = \"center\";\n                ctx.textBaseline = \"middle\";\n                ctx.fillStyle = \"black\";\n                ctx.fillText(label, node.x, node.y);\n            });\n            const handleResize = ()=>{\n                Graph.width(0.8 * window.innerWidth);\n                Graph.height(0.6 * window.innerHeight);\n            };\n            window.addEventListener(\"resize\", handleResize);\n            return ()=>{\n                window.removeEventListener(\"resize\", handleResize);\n            };\n        }\n    }, [\n        graphData\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex items-center justify-center\",\n        style: {\n            overflow: \"hidden\"\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            id: \"graph\",\n            ref: graphRef,\n            style: {\n                width: \"80vw\",\n                height: \"60vh\",\n                border: \"1px solid #000\",\n                marginTop: \"32px\"\n            }\n        }, void 0, false, {\n            fileName: \"/Users/rafael/work/buddy-link/buddy-ts-examples/next/sponsaru/src/components/force-graph.tsx\",\n            lineNumber: 184,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/rafael/work/buddy-link/buddy-ts-examples/next/sponsaru/src/components/force-graph.tsx\",\n        lineNumber: 183,\n        columnNumber: 5\n    }, undefined);\n};\n_s(GraphVisualization, \"I8nEc+w+QiVP3DVtHUIvCiUYVZA=\");\n_c = GraphVisualization;\n/* harmony default export */ __webpack_exports__[\"default\"] = (GraphVisualization);\n// Define getPrunedTree within this useEffect\nconst getPrunedTree = (nodesById)=>{\n    if (!nodesById) return {\n        nodes: [],\n        links: []\n    };\n    const visibleNodes = [];\n    const visibleLinks = [];\n    const traverseTree = (node)=>{\n        if (!node) return;\n        visibleNodes.push(node);\n        if (node.collapsed) return;\n        visibleLinks.push(...node.childLinks);\n        node.childLinks.map((link)=>nodesById[link.target]).forEach(traverseTree);\n    };\n    traverseTree(nodesById[\"1\"]);\n    return {\n        nodes: visibleNodes,\n        links: visibleLinks\n    };\n};\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2ZvcmNlLWdyYXBoLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFb0Q7QUFDZjtBQUNaO0FBQ21DO0FBa0I1RCxNQUFNTSxxQkFBK0I7O0lBQ25DLE1BQU0sQ0FBQ0MsV0FBV0MsYUFBYSxHQUFHUCwrQ0FBUUEsQ0FBbUM7UUFBRVEsT0FBTyxFQUFFO1FBQUVDLE9BQU8sRUFBRTtJQUFDO0lBQ3BHLE1BQU1DLFdBQVdULDZDQUFNQSxDQUF3QjtJQUUvQ0YsZ0RBQVNBLENBQUM7UUFDUixNQUFNWSxjQUFjUCx5RUFBaUJBLENBQUM7UUFFdEMsdURBQXVEO1FBQ3ZELE1BQU1JLFNBQWdCRyxZQUFZSCxLQUFLLENBQUNJLEdBQUcsQ0FBQyxDQUFDQyxPQUFVO2dCQUNyRCxHQUFHQSxJQUFJO2dCQUNQQyxXQUFXRCxLQUFLRSxFQUFFLEtBQUs7Z0JBQ3ZCQyxZQUFZLEVBQUU7WUFDaEI7UUFFQSxvQ0FBb0M7UUFDcEMsTUFBTUMsWUFBWUMsT0FBT0MsV0FBVyxDQUFDWCxPQUFNSSxHQUFHLENBQUMsQ0FBQ0MsT0FBUztnQkFBQ0EsS0FBS0UsRUFBRTtnQkFBRUY7YUFBSztRQUV4RSxnRUFBZ0U7UUFDaEUsTUFBTUosUUFBZ0JFLFlBQVlGLEtBQUs7UUFDdkNBLE1BQU1XLE9BQU8sQ0FBQyxDQUFDQztZQUNiLE1BQU1DLGFBQWFMLFNBQVMsQ0FBQ0ksS0FBS0UsTUFBTSxDQUFDO1lBQ3pDLElBQUlELFlBQVk7Z0JBQ2RBLFdBQVdOLFVBQVUsQ0FBRVEsSUFBSSxDQUFDSDtZQUM5QjtRQUNGO1FBRUEsd0RBQXdEO1FBQ3hEZCxhQUFhO1lBQUVDLE9BQU9BO1lBQU9DLE9BQU8sRUFBRTtRQUFDO1FBRXZDLE1BQU1nQixRQUFRdkIsdURBQVVBLEdBQUdRLFNBQVNnQixPQUFPLEVBQ3hDQyxLQUFLLENBQUMsTUFBTUMsT0FBT0MsVUFBVSxFQUM3QkMsTUFBTSxDQUFDLE1BQU1GLE9BQU9HLFdBQVcsRUFDL0J6QixTQUFTLENBQUMwQixjQUFjeEIsU0FDeEJ5QixTQUFTLENBQUMsTUFDVkMsZUFBZSxDQUFDLFNBQ2hCQyxjQUFjLENBQUMsTUFDZkMsT0FBTyxDQUFDLFFBQVFqQyx5Q0FBWSxHQUFHbUMsUUFBUSxDQUFDLElBQUlDLFFBQVEsQ0FBQyxJQUNyREgsT0FBTyxDQUFDLGFBQWFqQyw0Q0FBZSxHQUFHc0MsTUFBTSxDQUFDLElBQzlDQyxXQUFXLENBQUMsQ0FBQzdCO1lBQ1osSUFBSUgsU0FBU2dCLE9BQU8sRUFBRTtnQkFDcEJoQixTQUFTZ0IsT0FBTyxDQUFDaUIsS0FBSyxDQUFDQyxNQUFNLEdBQUcvQixRQUFRLEtBQWVHLFVBQVUsQ0FBRTZCLE1BQU0sR0FBRyxZQUFZO1lBQzFGO1FBQ0YsR0FDQ0MsV0FBVyxDQUFDLENBQUNqQztZQUNaLE1BQU1rQyxJQUFJbEM7WUFDVixJQUFJa0MsRUFBRS9CLFVBQVUsQ0FBRTZCLE1BQU0sRUFBRTtnQkFDeEJFLEVBQUVqQyxTQUFTLEdBQUcsQ0FBQ2lDLEVBQUVqQyxTQUFTO2dCQUMxQlAsYUFBYXlCLGNBQWNmO1lBQzdCO1FBQ0YsR0FDQytCLGdCQUFnQixDQUFDLENBQUNuQyxNQUFZb0MsS0FBS0M7WUFDbEMsTUFBTUMsUUFBUXRDLEtBQUtFLEVBQUU7WUFDckIsTUFBTXFDLFdBQVcsS0FBS0Y7WUFDdEJELElBQUlJLElBQUksR0FBRyxHQUFZLE9BQVRELFVBQVM7WUFFdkIsSUFBSXZDLEtBQUtFLEVBQUUsS0FBSyxLQUFLO2dCQUNuQixNQUFNdUMsTUFBTSxJQUFJQztnQkFDaEJELElBQUlFLEdBQUcsR0FBRztnQkFDVkYsSUFBSUcsTUFBTSxHQUFHO29CQUNYUixJQUFJUyxTQUFTLENBQUNKLEtBQUt6QyxLQUFLOEMsQ0FBQyxHQUFJTCxJQUFJM0IsS0FBSyxHQUFHLEdBQUdkLEtBQUsrQyxDQUFDLEdBQUlOLElBQUl4QixNQUFNLEdBQUc7Z0JBQ3JFO1lBQ0YsT0FBTztnQkFDTG1CLElBQUlZLFNBQVMsR0FBR2hELEtBQUtpRCxLQUFLO2dCQUMxQmIsSUFBSWMsU0FBUztnQkFDYmQsSUFBSWUsR0FBRyxDQUFDbkQsS0FBSzhDLENBQUMsRUFBRzlDLEtBQUsrQyxDQUFDLEVBQUcsR0FBRyxHQUFHLElBQUlLLEtBQUtDLEVBQUUsRUFBRTtnQkFDN0NqQixJQUFJa0IsSUFBSTtnQkFDUmxCLElBQUltQixXQUFXLEdBQUc7Z0JBQ2xCbkIsSUFBSW9CLE1BQU07WUFDWjtZQUVBLE1BQU1DLFlBQVlyQixJQUFJc0IsV0FBVyxDQUFDcEIsT0FBT3hCLEtBQUs7WUFDOUMsTUFBTTZDLGlCQUFpQjtnQkFBQ0Y7Z0JBQVdsQjthQUFTLENBQUN4QyxHQUFHLENBQUMsQ0FBQ21DLElBQU1BLElBQUlLLFdBQVc7WUFDdkVILElBQUlZLFNBQVMsR0FBRztZQUNoQlosSUFBSXdCLFFBQVEsQ0FBQzVELEtBQUs4QyxDQUFDLEdBQUlhLGNBQWMsQ0FBQyxFQUFFLEdBQUcsR0FBRzNELEtBQUsrQyxDQUFDLEdBQUlZLGNBQWMsQ0FBQyxFQUFFLEdBQUcsTUFBTUE7WUFDbEZ2QixJQUFJeUIsU0FBUyxHQUFHO1lBQ2hCekIsSUFBSTBCLFlBQVksR0FBRztZQUNuQjFCLElBQUlZLFNBQVMsR0FBRztZQUNoQlosSUFBSTJCLFFBQVEsQ0FBQ3pCLE9BQU90QyxLQUFLOEMsQ0FBQyxFQUFHOUMsS0FBSytDLENBQUM7UUFDckM7UUFFRixNQUFNaUIsZUFBZTtZQUNuQnBELE1BQU1FLEtBQUssQ0FBQyxNQUFNQyxPQUFPQyxVQUFVO1lBQ25DSixNQUFNSyxNQUFNLENBQUMsTUFBTUYsT0FBT0csV0FBVztRQUN2QztRQUVBSCxPQUFPa0QsZ0JBQWdCLENBQUMsVUFBVUQ7UUFDbEMsT0FBTztZQUNMakQsT0FBT21ELG1CQUFtQixDQUFDLFVBQVVGO1FBQ3ZDO0lBQ0YsR0FBRyxFQUFFO0lBRUw5RSxnREFBU0EsQ0FBQztRQUNSLElBQUlPLFVBQVVFLEtBQUssQ0FBQ3FDLE1BQU0sR0FBRyxHQUFHO1lBQzlCLE1BQU01QixZQUFZQyxPQUFPQyxXQUFXLENBQUNYLE1BQU1JLEdBQUcsQ0FBQyxDQUFDQyxPQUFTO29CQUFDQSxLQUFLRSxFQUFFO29CQUFFRjtpQkFBSztZQUV4RSxNQUFNWSxRQUFRdkIsdURBQVVBLEdBQUdRLFNBQVNnQixPQUFPLEVBQ3hDQyxLQUFLLENBQUMsTUFBTUMsT0FBT0MsVUFBVSxFQUM3QkMsTUFBTSxDQUFDLE1BQU1GLE9BQU9HLFdBQVcsRUFDL0J6QixTQUFTLENBQUNBLFdBQ1YyQixTQUFTLENBQUMsTUFDVkMsZUFBZSxDQUFDLFNBQ2hCQyxjQUFjLENBQUMsTUFDZkMsT0FBTyxDQUFDLFFBQVFqQyx5Q0FBWSxHQUFHbUMsUUFBUSxDQUFDLElBQUlDLFFBQVEsQ0FBQyxJQUNyREgsT0FBTyxDQUFDLGFBQWFqQyw0Q0FBZSxHQUFHc0MsTUFBTSxDQUFDLElBQzlDQyxXQUFXLENBQUMsQ0FBQzdCO2dCQUNaLElBQUlILFNBQVNnQixPQUFPLEVBQUU7b0JBQ3BCaEIsU0FBU2dCLE9BQU8sQ0FBQ2lCLEtBQUssQ0FBQ0MsTUFBTSxHQUFHL0IsUUFBUSxLQUFlRyxVQUFVLENBQUU2QixNQUFNLEdBQUcsWUFBWTtnQkFDMUY7WUFDRixHQUNDQyxXQUFXLENBQUMsQ0FBQ2pDO2dCQUNaLE1BQU1rQyxJQUFJbEM7Z0JBQ1YsSUFBSWtDLEVBQUUvQixVQUFVLENBQUU2QixNQUFNLEVBQUU7b0JBQ3hCRSxFQUFFakMsU0FBUyxHQUFHLENBQUNpQyxFQUFFakMsU0FBUztvQkFDMUJQLGFBQWF5QixjQUFjZjtnQkFDN0I7WUFDRixHQUNDK0IsZ0JBQWdCLENBQUMsQ0FBQ25DLE1BQVlvQyxLQUFLQztnQkFDbEMsTUFBTUMsUUFBUXRDLEtBQUtFLEVBQUU7Z0JBQ3JCLE1BQU1xQyxXQUFXLEtBQUtGO2dCQUN0QkQsSUFBSUksSUFBSSxHQUFHLEdBQVksT0FBVEQsVUFBUztnQkFFdkIsSUFBSXZDLEtBQUtFLEVBQUUsS0FBSyxLQUFLO29CQUNuQixNQUFNdUMsTUFBTSxJQUFJQztvQkFDaEJELElBQUlFLEdBQUcsR0FBRztvQkFDVkYsSUFBSUcsTUFBTSxHQUFHO3dCQUNYUixJQUFJUyxTQUFTLENBQUNKLEtBQUt6QyxLQUFLOEMsQ0FBQyxHQUFJTCxJQUFJM0IsS0FBSyxHQUFHLEdBQUdkLEtBQUsrQyxDQUFDLEdBQUlOLElBQUl4QixNQUFNLEdBQUc7b0JBQ3JFO2dCQUNGLE9BQU87b0JBQ0xtQixJQUFJWSxTQUFTLEdBQUdoRCxLQUFLaUQsS0FBSztvQkFDMUJiLElBQUljLFNBQVM7b0JBQ2JkLElBQUllLEdBQUcsQ0FBQ25ELEtBQUs4QyxDQUFDLEVBQUc5QyxLQUFLK0MsQ0FBQyxFQUFHLEdBQUcsR0FBRyxJQUFJSyxLQUFLQyxFQUFFLEVBQUU7b0JBQzdDakIsSUFBSWtCLElBQUk7b0JBQ1JsQixJQUFJbUIsV0FBVyxHQUFHO29CQUNsQm5CLElBQUlvQixNQUFNO2dCQUNaO2dCQUVBLE1BQU1DLFlBQVlyQixJQUFJc0IsV0FBVyxDQUFDcEIsT0FBT3hCLEtBQUs7Z0JBQzlDLE1BQU02QyxpQkFBaUI7b0JBQUNGO29CQUFXbEI7aUJBQVMsQ0FBQ3hDLEdBQUcsQ0FBQyxDQUFDbUMsSUFBTUEsSUFBSUssV0FBVztnQkFDdkVILElBQUlZLFNBQVMsR0FBRztnQkFDaEJaLElBQUl3QixRQUFRLENBQUM1RCxLQUFLOEMsQ0FBQyxHQUFJYSxjQUFjLENBQUMsRUFBRSxHQUFHLEdBQUczRCxLQUFLK0MsQ0FBQyxHQUFJWSxjQUFjLENBQUMsRUFBRSxHQUFHLE1BQU1BO2dCQUNsRnZCLElBQUl5QixTQUFTLEdBQUc7Z0JBQ2hCekIsSUFBSTBCLFlBQVksR0FBRztnQkFDbkIxQixJQUFJWSxTQUFTLEdBQUc7Z0JBQ2hCWixJQUFJMkIsUUFBUSxDQUFDekIsT0FBT3RDLEtBQUs4QyxDQUFDLEVBQUc5QyxLQUFLK0MsQ0FBQztZQUNyQztZQUVGLE1BQU1pQixlQUFlO2dCQUNuQnBELE1BQU1FLEtBQUssQ0FBQyxNQUFNQyxPQUFPQyxVQUFVO2dCQUNuQ0osTUFBTUssTUFBTSxDQUFDLE1BQU1GLE9BQU9HLFdBQVc7WUFDdkM7WUFFQUgsT0FBT2tELGdCQUFnQixDQUFDLFVBQVVEO1lBQ2xDLE9BQU87Z0JBQ0xqRCxPQUFPbUQsbUJBQW1CLENBQUMsVUFBVUY7WUFDdkM7UUFDRjtJQUNGLEdBQUc7UUFBQ3ZFO0tBQVU7SUFFZCxxQkFDRSw4REFBQzBFO1FBQUlDLFdBQVU7UUFBbUN0QyxPQUFPO1lBQUV1QyxVQUFVO1FBQVM7a0JBQzVFLDRFQUFDRjtZQUNDakUsSUFBRztZQUNIb0UsS0FBS3pFO1lBQ0xpQyxPQUFPO2dCQUNMaEIsT0FBTztnQkFDUEcsUUFBUTtnQkFDUnNELFFBQVE7Z0JBQ1JDLFdBQVc7WUFDYjs7Ozs7Ozs7Ozs7QUFJUjtHQTVLTWhGO0tBQUFBO0FBOEtOLCtEQUFlQSxrQkFBa0JBLEVBQUM7QUFFbEMsNkNBQTZDO0FBQzdDLE1BQU0yQixnQkFBZ0IsQ0FBQ2Y7SUFDckIsSUFBSSxDQUFDQSxXQUFXLE9BQU87UUFBRVQsT0FBTyxFQUFFO1FBQUVDLE9BQU8sRUFBRTtJQUFDO0lBQzlDLE1BQU02RSxlQUF1QixFQUFFO0lBQy9CLE1BQU1DLGVBQXVCLEVBQUU7SUFFL0IsTUFBTUMsZUFBZSxDQUFDM0U7UUFDcEIsSUFBSSxDQUFDQSxNQUFNO1FBQ1h5RSxhQUFhOUQsSUFBSSxDQUFDWDtRQUNsQixJQUFJQSxLQUFLQyxTQUFTLEVBQUU7UUFDcEJ5RSxhQUFhL0QsSUFBSSxJQUFJWCxLQUFLRyxVQUFVO1FBQ3BDSCxLQUFLRyxVQUFVLENBQUVKLEdBQUcsQ0FBQyxDQUFDUyxPQUFTSixTQUFTLENBQUNJLEtBQUtvRSxNQUFNLENBQUMsRUFBRXJFLE9BQU8sQ0FBQ29FO0lBQ2pFO0lBRUFBLGFBQWF2RSxTQUFTLENBQUMsSUFBSTtJQUUzQixPQUFPO1FBQUVULE9BQU84RTtRQUFjN0UsT0FBTzhFO0lBQWE7QUFDcEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvZm9yY2UtZ3JhcGgudHN4PzAxMzEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9yY2VHcmFwaCBmcm9tICdmb3JjZS1ncmFwaCc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgeyBnZW5lcmF0ZUdyYXBoRGF0YSB9IGZyb20gJ0AvYXBwL3Rlc3QvZ2VuZXJhdGVEYXRhJztcblxudHlwZSBOb2RlID0ge1xuICBpZDogc3RyaW5nO1xuICBncm91cDogbnVtYmVyO1xuICBjb2xvcjogc3RyaW5nO1xuICB4PzogbnVtYmVyO1xuICB5PzogbnVtYmVyO1xuICBjb2xsYXBzZWQ/OiBib29sZWFuO1xuICBjaGlsZExpbmtzPzogTGlua1tdO1xufTtcblxudHlwZSBMaW5rID0ge1xuICBpZDogc3RyaW5nO1xuICBzb3VyY2U6IHN0cmluZztcbiAgdGFyZ2V0OiBzdHJpbmc7XG59O1xuXG5jb25zdCBHcmFwaFZpc3VhbGl6YXRpb246IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBbZ3JhcGhEYXRhLCBzZXRHcmFwaERhdGFdID0gdXNlU3RhdGU8eyBub2RlczogTm9kZVtdOyBsaW5rczogTGlua1tdIH0+KHsgbm9kZXM6IFtdLCBsaW5rczogW10gfSk7XG4gIGNvbnN0IGdyYXBoUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50IHwgbnVsbD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBpbml0aWFsRGF0YSA9IGdlbmVyYXRlR3JhcGhEYXRhKDIwMCk7XG5cbiAgICAvLyBJbml0aWFsaXplIG5vZGVzIHdpdGggY29sbGFwc2VkIHN0YXRlIGFuZCBjaGlsZExpbmtzXG4gICAgY29uc3Qgbm9kZXM6IE5vZGVbXSA9IGluaXRpYWxEYXRhLm5vZGVzLm1hcCgobm9kZSkgPT4gKHtcbiAgICAgIC4uLm5vZGUsXG4gICAgICBjb2xsYXBzZWQ6IG5vZGUuaWQgIT09ICcxJyxcbiAgICAgIGNoaWxkTGlua3M6IFtdLFxuICAgIH0pKTtcblxuICAgIC8vIENyZWF0ZSBhIG1hcCBvZiBub2RlcyBieSB0aGVpciBJRFxuICAgIGNvbnN0IG5vZGVzQnlJZCA9IE9iamVjdC5mcm9tRW50cmllcyhub2Rlcy5tYXAoKG5vZGUpID0+IFtub2RlLmlkLCBub2RlXSkpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBsaW5rcyBhbmQgYXNzaWduIGNoaWxkIGxpbmtzIHRvIHRoZWlyIHBhcmVudCBub2Rlc1xuICAgIGNvbnN0IGxpbmtzOiBMaW5rW10gPSBpbml0aWFsRGF0YS5saW5rcztcbiAgICBsaW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2VOb2RlID0gbm9kZXNCeUlkW2xpbmsuc291cmNlXTtcbiAgICAgIGlmIChzb3VyY2VOb2RlKSB7XG4gICAgICAgIHNvdXJjZU5vZGUuY2hpbGRMaW5rcyEucHVzaChsaW5rKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEluaXRpYWwgZ3JhcGggZGF0YSB3aXRoIG9ubHkgdGhlIGNlbnRyYWwgbm9kZSB2aXNpYmxlXG4gICAgc2V0R3JhcGhEYXRhKHsgbm9kZXM6IG5vZGVzLCBsaW5rczogW10gfSk7XG5cbiAgICBjb25zdCBHcmFwaCA9IEZvcmNlR3JhcGgoKShncmFwaFJlZi5jdXJyZW50ISlcbiAgICAgIC53aWR0aCgwLjggKiB3aW5kb3cuaW5uZXJXaWR0aClcbiAgICAgIC5oZWlnaHQoMC42ICogd2luZG93LmlubmVySGVpZ2h0KVxuICAgICAgLmdyYXBoRGF0YShnZXRQcnVuZWRUcmVlKG5vZGVzKSlcbiAgICAgIC5ub2RlTGFiZWwoJ2lkJylcbiAgICAgIC5ub2RlQXV0b0NvbG9yQnkoJ2dyb3VwJylcbiAgICAgIC5saW5rVmlzaWJpbGl0eSh0cnVlKVxuICAgICAgLmQzRm9yY2UoJ2xpbmsnLCBkMy5mb3JjZUxpbmsoKS5kaXN0YW5jZSgyMCkuc3RyZW5ndGgoMSkpXG4gICAgICAuZDNGb3JjZSgnY29sbGlzaW9uJywgZDMuZm9yY2VDb2xsaWRlKCkucmFkaXVzKDUpKVxuICAgICAgLm9uTm9kZUhvdmVyKChub2RlKSA9PiB7XG4gICAgICAgIGlmIChncmFwaFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgZ3JhcGhSZWYuY3VycmVudC5zdHlsZS5jdXJzb3IgPSBub2RlICYmIChub2RlIGFzIE5vZGUpLmNoaWxkTGlua3MhLmxlbmd0aCA/ICdwb2ludGVyJyA6ICcnO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLm9uTm9kZUNsaWNrKChub2RlKSA9PiB7XG4gICAgICAgIGNvbnN0IG4gPSBub2RlIGFzIE5vZGU7XG4gICAgICAgIGlmIChuLmNoaWxkTGlua3MhLmxlbmd0aCkge1xuICAgICAgICAgIG4uY29sbGFwc2VkID0gIW4uY29sbGFwc2VkO1xuICAgICAgICAgIHNldEdyYXBoRGF0YShnZXRQcnVuZWRUcmVlKG5vZGVzQnlJZCkpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLm5vZGVDYW52YXNPYmplY3QoKG5vZGU6IE5vZGUsIGN0eCwgZ2xvYmFsU2NhbGUpID0+IHtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBub2RlLmlkO1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IDEyIC8gZ2xvYmFsU2NhbGU7XG4gICAgICAgIGN0eC5mb250ID0gYCR7Zm9udFNpemV9cHggU2Fucy1TZXJpZmA7XG5cbiAgICAgICAgaWYgKG5vZGUuaWQgPT09ICcxJykge1xuICAgICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgIGltZy5zcmMgPSAnL2xvZ28ud2VicCc7XG4gICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBub2RlLnghIC0gaW1nLndpZHRoIC8gMiwgbm9kZS55ISAtIGltZy5oZWlnaHQgLyAyKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBub2RlLmNvbG9yO1xuICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBjdHguYXJjKG5vZGUueCEsIG5vZGUueSEsIDUsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjIpJztcbiAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgICAgICBjb25zdCBiY2tnRGltZW5zaW9ucyA9IFt0ZXh0V2lkdGgsIGZvbnRTaXplXS5tYXAoKG4pID0+IG4gKyBmb250U2l6ZSAqIDAuMik7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpJztcbiAgICAgICAgY3R4LmZpbGxSZWN0KG5vZGUueCEgLSBiY2tnRGltZW5zaW9uc1swXSAvIDIsIG5vZGUueSEgLSBiY2tnRGltZW5zaW9uc1sxXSAvIDIsIC4uLmJja2dEaW1lbnNpb25zKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICBjdHguZmlsbFRleHQobGFiZWwsIG5vZGUueCEsIG5vZGUueSEpO1xuICAgICAgfSk7XG5cbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICBHcmFwaC53aWR0aCgwLjggKiB3aW5kb3cuaW5uZXJXaWR0aCk7XG4gICAgICBHcmFwaC5oZWlnaHQoMC42ICogd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICB9O1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChncmFwaERhdGEubm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qgbm9kZXNCeUlkID0gT2JqZWN0LmZyb21FbnRyaWVzKG5vZGVzLm1hcCgobm9kZSkgPT4gW25vZGUuaWQsIG5vZGVdKSk7XG5cbiAgICAgIGNvbnN0IEdyYXBoID0gRm9yY2VHcmFwaCgpKGdyYXBoUmVmLmN1cnJlbnQhKVxuICAgICAgICAud2lkdGgoMC44ICogd2luZG93LmlubmVyV2lkdGgpXG4gICAgICAgIC5oZWlnaHQoMC42ICogd2luZG93LmlubmVySGVpZ2h0KVxuICAgICAgICAuZ3JhcGhEYXRhKGdyYXBoRGF0YSlcbiAgICAgICAgLm5vZGVMYWJlbCgnaWQnKVxuICAgICAgICAubm9kZUF1dG9Db2xvckJ5KCdncm91cCcpXG4gICAgICAgIC5saW5rVmlzaWJpbGl0eSh0cnVlKVxuICAgICAgICAuZDNGb3JjZSgnbGluaycsIGQzLmZvcmNlTGluaygpLmRpc3RhbmNlKDIwKS5zdHJlbmd0aCgxKSlcbiAgICAgICAgLmQzRm9yY2UoJ2NvbGxpc2lvbicsIGQzLmZvcmNlQ29sbGlkZSgpLnJhZGl1cyg1KSlcbiAgICAgICAgLm9uTm9kZUhvdmVyKChub2RlKSA9PiB7XG4gICAgICAgICAgaWYgKGdyYXBoUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGdyYXBoUmVmLmN1cnJlbnQuc3R5bGUuY3Vyc29yID0gbm9kZSAmJiAobm9kZSBhcyBOb2RlKS5jaGlsZExpbmtzIS5sZW5ndGggPyAncG9pbnRlcicgOiAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5vbk5vZGVDbGljaygobm9kZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG4gPSBub2RlIGFzIE5vZGU7XG4gICAgICAgICAgaWYgKG4uY2hpbGRMaW5rcyEubGVuZ3RoKSB7XG4gICAgICAgICAgICBuLmNvbGxhcHNlZCA9ICFuLmNvbGxhcHNlZDtcbiAgICAgICAgICAgIHNldEdyYXBoRGF0YShnZXRQcnVuZWRUcmVlKG5vZGVzQnlJZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLm5vZGVDYW52YXNPYmplY3QoKG5vZGU6IE5vZGUsIGN0eCwgZ2xvYmFsU2NhbGUpID0+IHtcbiAgICAgICAgICBjb25zdCBsYWJlbCA9IG5vZGUuaWQ7XG4gICAgICAgICAgY29uc3QgZm9udFNpemUgPSAxMiAvIGdsb2JhbFNjYWxlO1xuICAgICAgICAgIGN0eC5mb250ID0gYCR7Zm9udFNpemV9cHggU2Fucy1TZXJpZmA7XG5cbiAgICAgICAgICBpZiAobm9kZS5pZCA9PT0gJzEnKSB7XG4gICAgICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIGltZy5zcmMgPSAnL2xvZ28ud2VicCc7XG4gICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgbm9kZS54ISAtIGltZy53aWR0aCAvIDIsIG5vZGUueSEgLSBpbWcuaGVpZ2h0IC8gMik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbm9kZS5jb2xvcjtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5hcmMobm9kZS54ISwgbm9kZS55ISwgNSwgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjIpJztcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgICAgICAgIGNvbnN0IGJja2dEaW1lbnNpb25zID0gW3RleHRXaWR0aCwgZm9udFNpemVdLm1hcCgobikgPT4gbiArIGZvbnRTaXplICogMC4yKTtcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC44KSc7XG4gICAgICAgICAgY3R4LmZpbGxSZWN0KG5vZGUueCEgLSBiY2tnRGltZW5zaW9uc1swXSAvIDIsIG5vZGUueSEgLSBiY2tnRGltZW5zaW9uc1sxXSAvIDIsIC4uLmJja2dEaW1lbnNpb25zKTtcbiAgICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICAgIGN0eC5maWxsVGV4dChsYWJlbCwgbm9kZS54ISwgbm9kZS55ISk7XG4gICAgICAgIH0pO1xuXG4gICAgICBjb25zdCBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICAgIEdyYXBoLndpZHRoKDAuOCAqIHdpbmRvdy5pbm5lcldpZHRoKTtcbiAgICAgICAgR3JhcGguaGVpZ2h0KDAuNiAqIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICB9O1xuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFtncmFwaERhdGFdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIiBzdHlsZT17eyBvdmVyZmxvdzogJ2hpZGRlbicgfX0+XG4gICAgICA8ZGl2XG4gICAgICAgIGlkPVwiZ3JhcGhcIlxuICAgICAgICByZWY9e2dyYXBoUmVmfVxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIHdpZHRoOiAnODB2dycsXG4gICAgICAgICAgaGVpZ2h0OiAnNjB2aCcsXG4gICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICMwMDAnLFxuICAgICAgICAgIG1hcmdpblRvcDogJzMycHgnLFxuICAgICAgICB9fVxuICAgICAgPjwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR3JhcGhWaXN1YWxpemF0aW9uO1xuXG4vLyBEZWZpbmUgZ2V0UHJ1bmVkVHJlZSB3aXRoaW4gdGhpcyB1c2VFZmZlY3RcbmNvbnN0IGdldFBydW5lZFRyZWUgPSAobm9kZXNCeUlkKSA9PiB7XG4gIGlmICghbm9kZXNCeUlkKSByZXR1cm4geyBub2RlczogW10sIGxpbmtzOiBbXSB9O1xuICBjb25zdCB2aXNpYmxlTm9kZXM6IE5vZGVbXSA9IFtdO1xuICBjb25zdCB2aXNpYmxlTGlua3M6IExpbmtbXSA9IFtdO1xuXG4gIGNvbnN0IHRyYXZlcnNlVHJlZSA9IChub2RlOiBOb2RlKSA9PiB7XG4gICAgaWYgKCFub2RlKSByZXR1cm47XG4gICAgdmlzaWJsZU5vZGVzLnB1c2gobm9kZSk7XG4gICAgaWYgKG5vZGUuY29sbGFwc2VkKSByZXR1cm47XG4gICAgdmlzaWJsZUxpbmtzLnB1c2goLi4ubm9kZS5jaGlsZExpbmtzISk7XG4gICAgbm9kZS5jaGlsZExpbmtzIS5tYXAoKGxpbmspID0+IG5vZGVzQnlJZFtsaW5rLnRhcmdldF0pLmZvckVhY2godHJhdmVyc2VUcmVlKTtcbiAgfTtcblxuICB0cmF2ZXJzZVRyZWUobm9kZXNCeUlkWycxJ10pO1xuXG4gIHJldHVybiB7IG5vZGVzOiB2aXNpYmxlTm9kZXMsIGxpbmtzOiB2aXNpYmxlTGlua3MgfTtcbn07XG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJ1c2VSZWYiLCJGb3JjZUdyYXBoIiwiZDMiLCJnZW5lcmF0ZUdyYXBoRGF0YSIsIkdyYXBoVmlzdWFsaXphdGlvbiIsImdyYXBoRGF0YSIsInNldEdyYXBoRGF0YSIsIm5vZGVzIiwibGlua3MiLCJncmFwaFJlZiIsImluaXRpYWxEYXRhIiwibWFwIiwibm9kZSIsImNvbGxhcHNlZCIsImlkIiwiY2hpbGRMaW5rcyIsIm5vZGVzQnlJZCIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiZm9yRWFjaCIsImxpbmsiLCJzb3VyY2VOb2RlIiwic291cmNlIiwicHVzaCIsIkdyYXBoIiwiY3VycmVudCIsIndpZHRoIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImhlaWdodCIsImlubmVySGVpZ2h0IiwiZ2V0UHJ1bmVkVHJlZSIsIm5vZGVMYWJlbCIsIm5vZGVBdXRvQ29sb3JCeSIsImxpbmtWaXNpYmlsaXR5IiwiZDNGb3JjZSIsImZvcmNlTGluayIsImRpc3RhbmNlIiwic3RyZW5ndGgiLCJmb3JjZUNvbGxpZGUiLCJyYWRpdXMiLCJvbk5vZGVIb3ZlciIsInN0eWxlIiwiY3Vyc29yIiwibGVuZ3RoIiwib25Ob2RlQ2xpY2siLCJuIiwibm9kZUNhbnZhc09iamVjdCIsImN0eCIsImdsb2JhbFNjYWxlIiwibGFiZWwiLCJmb250U2l6ZSIsImZvbnQiLCJpbWciLCJJbWFnZSIsInNyYyIsIm9ubG9hZCIsImRyYXdJbWFnZSIsIngiLCJ5IiwiZmlsbFN0eWxlIiwiY29sb3IiLCJiZWdpblBhdGgiLCJhcmMiLCJNYXRoIiwiUEkiLCJmaWxsIiwic3Ryb2tlU3R5bGUiLCJzdHJva2UiLCJ0ZXh0V2lkdGgiLCJtZWFzdXJlVGV4dCIsImJja2dEaW1lbnNpb25zIiwiZmlsbFJlY3QiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJmaWxsVGV4dCIsImhhbmRsZVJlc2l6ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGl2IiwiY2xhc3NOYW1lIiwib3ZlcmZsb3ciLCJyZWYiLCJib3JkZXIiLCJtYXJnaW5Ub3AiLCJ2aXNpYmxlTm9kZXMiLCJ2aXNpYmxlTGlua3MiLCJ0cmF2ZXJzZVRyZWUiLCJ0YXJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/force-graph.tsx\n"));

/***/ })

});