"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sigma";
exports.ids = ["vendor-chunks/@sigma"];
exports.modules = {

/***/ "(ssr)/./node_modules/@sigma/node-image/dist/sigma-node-image.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sigma/node-image/dist/sigma-node-image.esm.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeImageProgram: () => (/* binding */ NodeImageProgram),\n/* harmony export */   NodePictogramProgram: () => (/* binding */ NodePictogramProgram),\n/* harmony export */   createNodeImageProgram: () => (/* binding */ getNodeImageProgram)\n/* harmony export */ });\n/* harmony import */ var sigma_rendering__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sigma/rendering */ \"(ssr)/./node_modules/sigma/rendering/dist/sigma-rendering.esm.js\");\n/* harmony import */ var sigma_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sigma/utils */ \"(ssr)/./node_modules/sigma/utils/dist/sigma-utils.esm.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\n\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n\n// language=GLSL\nvar SHADER_SOURCE = /*glsl*/\"\\nprecision highp float;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_diffVector;\\nvarying float v_radius;\\nvarying vec4 v_texture;\\n\\nuniform sampler2D u_atlas;\\nuniform float u_correctionRatio;\\nuniform float u_cameraAngle;\\nuniform float u_percentagePadding;\\nuniform bool u_colorizeImages;\\nuniform bool u_keepWithinCircle;\\n\\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\\n\\nconst float radius = 0.5;\\n\\nvoid main(void) {\\n  float border = 2.0 * u_correctionRatio;\\n  float dist = length(v_diffVector);\\n  vec4 color = gl_FragColor;\\n\\n  float c = cos(-u_cameraAngle);\\n  float s = sin(-u_cameraAngle);\\n  vec2 diffVector = mat2(c, s, -s, c) * (v_diffVector);\\n\\n  // No antialiasing for picking mode:\\n  #ifdef PICKING_MODE\\n  border = 0.0;\\n  color = v_color;\\n\\n  #else\\n  // First case: No image to display\\n  if (v_texture.w <= 0.0) {\\n    if (!u_colorizeImages) {\\n      color = v_color;\\n    }\\n  }\\n\\n  // Second case: Image loaded into the texture\\n  else {\\n    float paddingRatio = 1.0 + 2.0 * u_percentagePadding;\\n    float coef = u_keepWithinCircle ? 1.0 : \".concat(Math.SQRT2, \";\\n    vec2 coordinateInTexture = diffVector * vec2(paddingRatio, -paddingRatio) / v_radius / 2.0 * coef + vec2(0.5, 0.5);\\n    vec4 texel = texture2D(u_atlas, (v_texture.xy + coordinateInTexture * v_texture.zw), -1.0);\\n\\n    // Colorize all visible image pixels:\\n    if (u_colorizeImages) {\\n      color = mix(gl_FragColor, v_color, texel.a);\\n    }\\n\\n    // Colorize background pixels, keep image pixel colors:\\n    else {\\n      color = vec4(mix(v_color, texel, texel.a).rgb, max(texel.a, v_color.a));\\n    }\\n\\n    // Erase pixels \\\"in the padding\\\":\\n    if (abs(diffVector.x) > v_radius / paddingRatio || abs(diffVector.y) > v_radius / paddingRatio) {\\n      color = u_colorizeImages ? gl_FragColor : v_color;\\n    }\\n  }\\n  #endif\\n\\n  // Crop in a circle when u_keepWithinCircle is truthy:\\n  if (u_keepWithinCircle) {\\n    if (dist < v_radius - border) {\\n      gl_FragColor = color;\\n    } else if (dist < v_radius) {\\n      gl_FragColor = mix(transparent, color, (v_radius - dist) / border);\\n    }\\n  }\\n\\n  // Crop in a square else:\\n  else {\\n    float squareHalfSize = v_radius * \").concat(Math.SQRT1_2 * Math.cos(Math.PI / 12), \";\\n    if (abs(diffVector.x) > squareHalfSize || abs(diffVector.y) > squareHalfSize) {\\n      gl_FragColor = transparent;\\n    } else {\\n      gl_FragColor = color;\\n    }\\n  }\\n}\\n\");\nvar FRAGMENT_SHADER_SOURCE = SHADER_SOURCE;\n\n// language=GLSL\nvar VERTEX_SHADER_SOURCE = /*glsl*/\"\\nattribute vec4 a_id;\\nattribute vec4 a_color;\\nattribute vec2 a_position;\\nattribute float a_size;\\nattribute float a_angle;\\nattribute vec4 a_texture;\\n\\nuniform mat3 u_matrix;\\nuniform float u_sizeRatio;\\nuniform float u_correctionRatio;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_diffVector;\\nvarying float v_radius;\\nvarying vec4 v_texture;\\n\\nconst float bias = 255.0 / 254.0;\\nconst float marginRatio = 1.05;\\n\\nvoid main() {\\n  float size = a_size * u_correctionRatio / u_sizeRatio * 4.0;\\n  vec2 diffVector = size * vec2(cos(a_angle), sin(a_angle));\\n  vec2 position = a_position + diffVector * marginRatio;\\n  gl_Position = vec4(\\n    (u_matrix * vec3(position, 1)).xy,\\n    0,\\n    1\\n  );\\n\\n  v_diffVector = diffVector;\\n  v_radius = size / 2.0 / marginRatio;\\n\\n  #ifdef PICKING_MODE\\n  // For picking mode, we use the ID as the color:\\n  v_color = a_id;\\n  #else\\n  // For normal mode, we use the color:\\n  v_color = a_color;\\n\\n  // Pass the texture coordinates:\\n  v_texture = a_texture;\\n  #endif\\n\\n  v_color.a *= bias;\\n}\\n\";\nvar VERTEX_SHADER_SOURCE$1 = VERTEX_SHADER_SOURCE;\n\nfunction _regeneratorRuntime() {\n  _regeneratorRuntime = function () {\n    return e;\n  };\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function (t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function (t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw new Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(typeof e + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function (e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function () {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function (e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function (t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function (t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function (t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    catch: function (t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\n\n/**\n * Useful types:\n * *************\n */\n\nvar DEFAULT_TEXTURE_MANAGER_OPTIONS = {\n  size: {\n    mode: \"max\",\n    value: 512\n  },\n  objectFit: \"cover\",\n  correctCentering: false\n};\nvar DEBOUNCE_TIMEOUT = 100;\n\n// This margin helps avoiding images collisions in the texture:\nvar MARGIN_IN_TEXTURE = 1;\n\n/**\n * Helpers:\n * ********\n */\n/**\n * This helper loads an image at a given URL, and returns an HTMLImageElement\n * with it displayed once it's properly loaded, within a promise.\n */\nfunction loadRasterImage(imageSource) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.addEventListener(\"load\", function () {\n      resolve(image);\n    }, {\n      once: true\n    });\n    image.addEventListener(\"error\", function (e) {\n      reject(e.error);\n    }, {\n      once: true\n    });\n\n    // Load image:\n    image.setAttribute(\"crossOrigin\", \"\");\n    image.src = imageSource;\n  });\n}\n\n/**\n * This helper loads an SVG image at a given URL, adjusts its size to a given\n * size, and returns an HTMLImageElement with it displayed once it's properly\n * loaded, within a promise.\n */\nfunction loadSVGImage(_x) {\n  return _loadSVGImage.apply(this, arguments);\n}\n\n/**\n * This helper loads an image using the proper function.\n */\nfunction _loadSVGImage() {\n  _loadSVGImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(imageSource) {\n    var _ref,\n      size,\n      resp,\n      svgString,\n      svg,\n      root,\n      originalWidth,\n      originalHeight,\n      correctedSvgString,\n      blob,\n      url,\n      res,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, size = _ref.size;\n          _context2.next = 3;\n          return fetch(imageSource);\n        case 3:\n          resp = _context2.sent;\n          _context2.next = 6;\n          return resp.text();\n        case 6:\n          svgString = _context2.sent;\n          svg = new DOMParser().parseFromString(svgString, \"image/svg+xml\");\n          root = svg.documentElement;\n          originalWidth = root.getAttribute(\"width\");\n          originalHeight = root.getAttribute(\"height\");\n          if (!(!originalWidth || !originalHeight)) {\n            _context2.next = 13;\n            break;\n          }\n          throw new Error(\"loadSVGImage: cannot use `size` if target SVG has no definite dimensions.\");\n        case 13:\n          if (typeof size === \"number\") {\n            root.setAttribute(\"width\", \"\" + size);\n            root.setAttribute(\"height\", \"\" + size);\n          }\n\n          // NOTE: since Google Material last changes to their icon viewBox, this\n          // code is no longer necessary (hopefully it does not break something else...)\n          // root.setAttribute(\"viewBox\", `0 0 ${originalWidth} ${originalHeight}`);\n          correctedSvgString = new XMLSerializer().serializeToString(svg);\n          blob = new Blob([correctedSvgString], {\n            type: \"image/svg+xml\"\n          });\n          url = URL.createObjectURL(blob);\n          res = loadRasterImage(url);\n          res[\"finally\"](function () {\n            return URL.revokeObjectURL(url);\n          });\n          return _context2.abrupt(\"return\", res);\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _loadSVGImage.apply(this, arguments);\n}\nfunction loadImage(_x2) {\n  return _loadImage.apply(this, arguments);\n}\n\n/**\n * This helper computes exact coordinates to draw an image onto a texture.\n */\nfunction _loadImage() {\n  _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(imageSource) {\n    var _imageSource$split$0$;\n    var _ref2,\n      size,\n      isSVG,\n      image,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref2 = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {}, size = _ref2.size;\n          isSVG = ((_imageSource$split$0$ = imageSource.split(/[#?]/)[0].split(\".\").pop()) === null || _imageSource$split$0$ === void 0 ? void 0 : _imageSource$split$0$.trim().toLowerCase()) === \"svg\";\n          if (!(isSVG && size)) {\n            _context3.next = 16;\n            break;\n          }\n          _context3.prev = 3;\n          _context3.next = 6;\n          return loadSVGImage(imageSource, {\n            size: size\n          });\n        case 6:\n          image = _context3.sent;\n          _context3.next = 14;\n          break;\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](3);\n          _context3.next = 13;\n          return loadRasterImage(imageSource);\n        case 13:\n          image = _context3.sent;\n        case 14:\n          _context3.next = 19;\n          break;\n        case 16:\n          _context3.next = 18;\n          return loadRasterImage(imageSource);\n        case 18:\n          image = _context3.sent;\n        case 19:\n          return _context3.abrupt(\"return\", image);\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[3, 9]]);\n  }));\n  return _loadImage.apply(this, arguments);\n}\nfunction refineImage(image, corrector, _ref3) {\n  var objectFit = _ref3.objectFit,\n    size = _ref3.size,\n    correctCentering = _ref3.correctCentering;\n  var sourceSize = objectFit === \"contain\" ? Math.max(image.width, image.height) : Math.min(image.width, image.height);\n  var destinationSize = size.mode === \"auto\" ? sourceSize : size.mode === \"force\" ? size.value : Math.min(size.value, sourceSize);\n  var sourceX = (image.width - sourceSize) / 2;\n  var sourceY = (image.height - sourceSize) / 2;\n  if (correctCentering) {\n    var correction = corrector.getCorrectionOffset(image, sourceSize);\n    sourceX = correction.x;\n    sourceY = correction.y;\n  }\n  return {\n    sourceX: sourceX,\n    sourceY: sourceY,\n    sourceSize: sourceSize,\n    destinationSize: destinationSize\n  };\n}\n\n/**\n * This helper takes a collection of image states and a context, draw all the\n * images in the context, and returns an atlas to get where each image is drawn\n * on the texture.\n */\nfunction drawTexture(ctx, images) {\n  var MAX_CANVAS_WIDTH = 3072;\n  var TARGET_FILL_PERCENTAGE = 0.6;\n\n  // 1. Sort images by height, decreasingly:\n  var imagesArray = [];\n  var totalArea = 0;\n  var maxItemWidth = 0;\n  for (var key in images) {\n    var imageState = images[key];\n    if (imageState.status !== \"ready\") continue;\n    maxItemWidth = Math.max(maxItemWidth, imageState.destinationSize);\n    totalArea += Math.pow(imageState.destinationSize, 2);\n    imagesArray.push(_objectSpread2({\n      key: key\n    }, imageState));\n  }\n  imagesArray.sort(function (a, b) {\n    return a.destinationSize > b.destinationSize ? -1 : 1;\n  });\n\n  // 2. Predict canvas width:\n  var predictedTotalArea = totalArea / TARGET_FILL_PERCENTAGE;\n  var predictedWidth = Math.min(Math.max(Math.sqrt(predictedTotalArea), maxItemWidth), MAX_CANVAS_WIDTH);\n\n  // 3. Refine images coordinates:\n  var refinedImagesArray = [];\n  var x = 0;\n  var y = 0;\n  var currentRowHeight = 0;\n  var maxRowWidth = 0;\n  var atlas = {};\n  for (var i = 0, l = imagesArray.length; i < l; i++) {\n    var _imagesArray$i = imagesArray[i],\n      _key = _imagesArray$i.key,\n      image = _imagesArray$i.image,\n      sourceSize = _imagesArray$i.sourceSize,\n      sourceX = _imagesArray$i.sourceX,\n      sourceY = _imagesArray$i.sourceY,\n      destinationSize = _imagesArray$i.destinationSize;\n    var destinationSizeWithMargin = destinationSize + MARGIN_IN_TEXTURE;\n    if (x + destinationSizeWithMargin > predictedWidth) {\n      maxRowWidth = Math.max(maxRowWidth, x);\n      x = 0;\n      y += currentRowHeight;\n      currentRowHeight = destinationSizeWithMargin;\n    }\n    refinedImagesArray.push({\n      key: _key,\n      image: image,\n      sourceX: sourceX,\n      sourceY: sourceY,\n      sourceSize: sourceSize,\n      destinationX: x,\n      destinationY: y,\n      destinationSize: destinationSize\n    });\n    atlas[_key] = {\n      x: x,\n      y: y,\n      size: destinationSize\n    };\n    x += destinationSizeWithMargin;\n    currentRowHeight = Math.max(currentRowHeight, destinationSizeWithMargin);\n  }\n\n  // 4. Crop texture to final best dimensions:\n  maxRowWidth = Math.max(maxRowWidth, x);\n  var canvas = ctx.canvas;\n  canvas.width = maxRowWidth;\n  canvas.height = y + currentRowHeight;\n\n  // 5. Fill texture:\n  for (var _i = 0, _l = refinedImagesArray.length; _i < _l; _i++) {\n    var _refinedImagesArray$_ = refinedImagesArray[_i],\n      _image = _refinedImagesArray$_.image,\n      _sourceSize = _refinedImagesArray$_.sourceSize,\n      _sourceX = _refinedImagesArray$_.sourceX,\n      _sourceY = _refinedImagesArray$_.sourceY,\n      _destinationSize = _refinedImagesArray$_.destinationSize,\n      destinationX = _refinedImagesArray$_.destinationX,\n      destinationY = _refinedImagesArray$_.destinationY;\n    ctx.drawImage(_image, _sourceX, _sourceY, _sourceSize, _sourceSize, destinationX, destinationY, _destinationSize, _destinationSize);\n  }\n  return atlas;\n}\n\n/**\n * This class helps to \"correct\" the centering of an SVG pictogram by finding\n * the \"true\" visually correct center through the barycenter of the pictogram's\n * alpha layer in x and y dimension.\n */\nvar PictogramCenteringCorrector = /*#__PURE__*/function () {\n  function PictogramCenteringCorrector() {\n    _classCallCheck(this, PictogramCenteringCorrector);\n    this.canvas = document.createElement(\"canvas\");\n    this.context = this.canvas.getContext(\"2d\", {\n      willReadFrequently: true\n    });\n  }\n  _createClass(PictogramCenteringCorrector, [{\n    key: \"getCorrectionOffset\",\n    value: function getCorrectionOffset(image, size) {\n      this.canvas.width = size;\n      this.canvas.height = size;\n      this.context.clearRect(0, 0, size, size);\n      this.context.drawImage(image, 0, 0, size, size);\n      var data = this.context.getImageData(0, 0, size, size).data;\n      var alpha = new Uint8ClampedArray(data.length / 4);\n      for (var i = 0; i < data.length; i++) {\n        alpha[i] = data[i * 4 + 3];\n      }\n      var sumX = 0;\n      var sumY = 0;\n      var total = 0;\n      for (var y = 0; y < size; y++) {\n        for (var x = 0; x < size; x++) {\n          var a = alpha[y * size + x];\n          total += a;\n          sumX += a * x;\n          sumY += a * y;\n        }\n      }\n      var barycenterX = sumX / total;\n      var barycenterY = sumY / total;\n      return {\n        x: barycenterX - size / 2,\n        y: barycenterY - size / 2\n      };\n    }\n  }]);\n  return PictogramCenteringCorrector;\n}();\nvar TextureManager = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(TextureManager, _EventEmitter);\n  function TextureManager() {\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, TextureManager);\n    _this = _callSuper(this, TextureManager);\n    _defineProperty(_assertThisInitialized(_this), \"canvas\", document.createElement(\"canvas\"));\n    _defineProperty(_assertThisInitialized(_this), \"ctx\", _this.canvas.getContext(\"2d\", {\n      willReadFrequently: true\n    }));\n    _defineProperty(_assertThisInitialized(_this), \"corrector\", new PictogramCenteringCorrector());\n    _defineProperty(_assertThisInitialized(_this), \"imageStates\", {});\n    _defineProperty(_assertThisInitialized(_this), \"texture\", _this.ctx.getImageData(0, 0, 1, 1));\n    _defineProperty(_assertThisInitialized(_this), \"atlas\", {});\n    _this.options = _objectSpread2(_objectSpread2({}, DEFAULT_TEXTURE_MANAGER_OPTIONS), options);\n    return _this;\n  }\n  _createClass(TextureManager, [{\n    key: \"scheduleGenerateTexture\",\n    value: function scheduleGenerateTexture() {\n      var _this2 = this;\n      if (typeof this.frameId === \"number\") return;\n      this.frameId = window.setTimeout(function () {\n        _this2.generateTexture();\n        _this2.frameId = undefined;\n      }, DEBOUNCE_TIMEOUT);\n    }\n  }, {\n    key: \"generateTexture\",\n    value: function generateTexture() {\n      this.atlas = drawTexture(this.ctx, this.imageStates);\n      this.texture = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n      this.emit(TextureManager.NEW_TEXTURE_EVENT, {\n        atlas: this.atlas,\n        texture: this.texture\n      });\n    }\n\n    // PUBLIC API:\n  }, {\n    key: \"registerImage\",\n    value: function () {\n      var _registerImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n        var size, image;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.imageStates[source]) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              this.imageStates[source] = {\n                status: \"loading\"\n              };\n              _context.prev = 3;\n              size = this.options.size;\n              _context.next = 7;\n              return loadImage(source, {\n                size: size.mode === \"force\" ? size.value : undefined\n              });\n            case 7:\n              image = _context.sent;\n              this.imageStates[source] = _objectSpread2({\n                status: \"ready\",\n                image: image\n              }, refineImage(image, this.corrector, this.options));\n              this.scheduleGenerateTexture();\n              _context.next = 15;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](3);\n              this.imageStates[source] = {\n                status: \"error\"\n              };\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[3, 12]]);\n      }));\n      function registerImage(_x3) {\n        return _registerImage.apply(this, arguments);\n      }\n      return registerImage;\n    }()\n  }, {\n    key: \"getAtlas\",\n    value: function getAtlas() {\n      return this.atlas;\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture() {\n      return this.texture;\n    }\n  }]);\n  return TextureManager;\n}(events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter);\n_defineProperty(TextureManager, \"NEW_TEXTURE_EVENT\", \"newTexture\");\n\nvar _excluded = [\"drawHover\", \"drawLabel\", \"drawingMode\", \"keepWithinCircle\", \"padding\", \"colorAttribute\"];\nvar _WebGLRenderingContex = WebGLRenderingContext,\n  UNSIGNED_BYTE = _WebGLRenderingContex.UNSIGNED_BYTE,\n  FLOAT = _WebGLRenderingContex.FLOAT;\nvar DEFAULT_CREATE_NODE_IMAGE_OPTIONS = _objectSpread2(_objectSpread2({}, DEFAULT_TEXTURE_MANAGER_OPTIONS), {}, {\n  drawingMode: \"background\",\n  keepWithinCircle: true,\n  drawLabel: undefined,\n  drawHover: undefined,\n  padding: 0,\n  colorAttribute: \"color\"\n});\nvar UNIFORMS = [\"u_sizeRatio\", \"u_correctionRatio\", \"u_cameraAngle\", \"u_percentagePadding\", \"u_matrix\", \"u_colorizeImages\", \"u_keepWithinCircle\", \"u_atlas\"];\n\n/**\n * To share the texture between the program instances of the graph and the\n * hovered nodes (to prevent some flickering, mostly), this program must be\n * \"built\" for each sigma instance:\n */\nfunction getNodeImageProgram(options) {\n  var _NodeImageProgram;\n  var _DEFAULT_CREATE_NODE_ = _objectSpread2(_objectSpread2(_objectSpread2({}, DEFAULT_CREATE_NODE_IMAGE_OPTIONS), options || {}), {}, {\n      drawLabel: undefined,\n      drawHover: undefined\n    }),\n    drawHover = _DEFAULT_CREATE_NODE_.drawHover,\n    drawLabel = _DEFAULT_CREATE_NODE_.drawLabel,\n    drawingMode = _DEFAULT_CREATE_NODE_.drawingMode,\n    keepWithinCircle = _DEFAULT_CREATE_NODE_.keepWithinCircle,\n    padding = _DEFAULT_CREATE_NODE_.padding,\n    colorAttribute = _DEFAULT_CREATE_NODE_.colorAttribute,\n    textureManagerOptions = _objectWithoutProperties(_DEFAULT_CREATE_NODE_, _excluded);\n\n  /**\n   * This texture manager is shared between all instances of this exact class,\n   * returned by this call to getNodeProgramImage. This means that remounting\n   * the sigma instance will not reload the images and regenerate the texture.\n   */\n  var textureManager = new TextureManager(textureManagerOptions);\n  return _NodeImageProgram = /*#__PURE__*/function (_NodeProgram) {\n    _inherits(NodeImageProgram, _NodeProgram);\n    function NodeImageProgram(gl, pickingBuffer, renderer) {\n      var _this;\n      _classCallCheck(this, NodeImageProgram);\n      _this = _callSuper(this, NodeImageProgram, [gl, pickingBuffer, renderer]);\n      _this.textureManagerCallback = function () {\n        if (!_assertThisInitialized(_this)) return;\n        if (_this.bindTexture) {\n          _this.atlas = textureManager.getAtlas();\n          _this.textureImage = textureManager.getTexture();\n          _this.bindTexture();\n          if (_this.latestRenderParams) _this.render(_this.latestRenderParams);\n        }\n        if (renderer && renderer.refresh) renderer.refresh();\n      };\n      textureManager.on(TextureManager.NEW_TEXTURE_EVENT, _this.textureManagerCallback);\n      _this.atlas = textureManager.getAtlas();\n      _this.textureImage = textureManager.getTexture();\n      _this.texture = gl.createTexture();\n      _this.bindTexture();\n      return _this;\n    }\n    _createClass(NodeImageProgram, [{\n      key: \"getDefinition\",\n      value: function getDefinition() {\n        return {\n          VERTICES: 3,\n          VERTEX_SHADER_SOURCE: VERTEX_SHADER_SOURCE$1,\n          FRAGMENT_SHADER_SOURCE: FRAGMENT_SHADER_SOURCE,\n          METHOD: WebGLRenderingContext.TRIANGLES,\n          UNIFORMS: UNIFORMS,\n          ATTRIBUTES: [{\n            name: \"a_position\",\n            size: 2,\n            type: FLOAT\n          }, {\n            name: \"a_size\",\n            size: 1,\n            type: FLOAT\n          }, {\n            name: \"a_color\",\n            size: 4,\n            type: UNSIGNED_BYTE,\n            normalized: true\n          }, {\n            name: \"a_id\",\n            size: 4,\n            type: UNSIGNED_BYTE,\n            normalized: true\n          }, {\n            name: \"a_texture\",\n            size: 4,\n            type: FLOAT\n          }],\n          CONSTANT_ATTRIBUTES: [{\n            name: \"a_angle\",\n            size: 1,\n            type: FLOAT\n          }],\n          CONSTANT_DATA: [[NodeImageProgram.ANGLE_1], [NodeImageProgram.ANGLE_2], [NodeImageProgram.ANGLE_3]]\n        };\n      }\n    }, {\n      key: \"kill\",\n      value: function kill() {\n        textureManager.off(TextureManager.NEW_TEXTURE_EVENT, this.textureManagerCallback);\n      }\n    }, {\n      key: \"bindTexture\",\n      value: function bindTexture() {\n        var gl = this.normalProgram.gl;\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.textureImage);\n        gl.generateMipmap(gl.TEXTURE_2D);\n      }\n    }, {\n      key: \"renderProgram\",\n      value: function renderProgram(params, programInfo) {\n        if (!programInfo.isPicking) {\n          // Rebind texture (since it's been just unbound by picking):\n          var gl = programInfo.gl;\n          gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        }\n        _get(_getPrototypeOf(NodeImageProgram.prototype), \"renderProgram\", this).call(this, params, programInfo);\n      }\n    }, {\n      key: \"processVisibleItem\",\n      value: function processVisibleItem(nodeIndex, startIndex, data) {\n        var array = this.array;\n        var color = (0,sigma_utils__WEBPACK_IMPORTED_MODULE_1__.floatColor)(data[colorAttribute]);\n        var imageSource = data.image;\n        var imagePosition = imageSource ? this.atlas[imageSource] : undefined;\n        if (typeof imageSource === \"string\" && !imagePosition) textureManager.registerImage(imageSource);\n        array[startIndex++] = data.x;\n        array[startIndex++] = data.y;\n        array[startIndex++] = data.size;\n        array[startIndex++] = color;\n        array[startIndex++] = nodeIndex;\n\n        // Reference texture:\n        if (imagePosition) {\n          var _this$textureImage = this.textureImage,\n            width = _this$textureImage.width,\n            height = _this$textureImage.height;\n          array[startIndex++] = imagePosition.x / width;\n          array[startIndex++] = imagePosition.y / height;\n          array[startIndex++] = imagePosition.size / width;\n          array[startIndex++] = imagePosition.size / height;\n        } else {\n          array[startIndex++] = 0;\n          array[startIndex++] = 0;\n          array[startIndex++] = 0;\n          array[startIndex++] = 0;\n        }\n      }\n    }, {\n      key: \"setUniforms\",\n      value: function setUniforms(params, _ref) {\n        var gl = _ref.gl,\n          uniformLocations = _ref.uniformLocations;\n        var u_sizeRatio = uniformLocations.u_sizeRatio,\n          u_correctionRatio = uniformLocations.u_correctionRatio,\n          u_matrix = uniformLocations.u_matrix,\n          u_atlas = uniformLocations.u_atlas,\n          u_colorizeImages = uniformLocations.u_colorizeImages,\n          u_keepWithinCircle = uniformLocations.u_keepWithinCircle,\n          u_cameraAngle = uniformLocations.u_cameraAngle,\n          u_percentagePadding = uniformLocations.u_percentagePadding;\n        this.latestRenderParams = params;\n        gl.uniform1f(u_correctionRatio, params.correctionRatio);\n        gl.uniform1f(u_sizeRatio, keepWithinCircle ? params.sizeRatio : params.sizeRatio / Math.SQRT2);\n        gl.uniform1f(u_cameraAngle, params.cameraAngle);\n        gl.uniform1f(u_percentagePadding, padding);\n        gl.uniformMatrix3fv(u_matrix, false, params.matrix);\n        gl.uniform1i(u_atlas, 0);\n        gl.uniform1i(u_colorizeImages, drawingMode === \"color\" ? 1 : 0);\n        gl.uniform1i(u_keepWithinCircle, keepWithinCircle ? 1 : 0);\n      }\n    }]);\n    return NodeImageProgram;\n  }(sigma_rendering__WEBPACK_IMPORTED_MODULE_0__.NodeProgram), _defineProperty(_NodeImageProgram, \"ANGLE_1\", 0), _defineProperty(_NodeImageProgram, \"ANGLE_2\", 2 * Math.PI / 3), _defineProperty(_NodeImageProgram, \"ANGLE_3\", 4 * Math.PI / 3), _defineProperty(_NodeImageProgram, \"drawLabel\", drawLabel), _defineProperty(_NodeImageProgram, \"drawHover\", drawHover), _NodeImageProgram;\n}\n\nvar NodeImageProgram = getNodeImageProgram();\nvar NodePictogramProgram = getNodeImageProgram({\n  keepWithinCircle: false,\n  size: {\n    mode: \"force\",\n    value: 256\n  },\n  drawingMode: \"color\",\n  correctCentering: true\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sigma/node-image/dist/sigma-node-image.esm.js\n");

/***/ })

};
;